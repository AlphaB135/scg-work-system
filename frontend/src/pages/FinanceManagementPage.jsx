// FinanceManagementPage.jsx
import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Chart
import { Doughnut } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  ArcElement,
  Tooltip,
  Legend
} from 'chart.js';

ChartJS.register(ArcElement, Tooltip, Legend);

export default function FinanceManagementPage() {
  const [employees, setEmployees] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");    // state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  const [currentPage, setCurrentPage] = useState(1);   // state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pagination
  const [employeesPerPage] = useState(10);             // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô row ‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  useEffect(() => {
    const fetchEmployees = async () => {
      try {
        const res = await fetch('http://localhost:5000/api/users', {
          credentials: 'include'
        });
        const data = await res.json();
        setEmployees(Array.isArray(data) ? data : []);
      } catch (err) {
        console.error('‚ùå Error fetching users:', err);
      }
    };
    fetchEmployees();
  }, []);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
  const handleGenerateDocuments = async () => {
    try {
      const res = await fetch('http://localhost:5000/api/payroll/generate-docs', {
        method: 'POST',
        credentials: 'include'
      });
      const data = await res.json();
      if (!res.ok) throw new Error(data.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
      alert(`‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${data.message}`);
    } catch (err) {
      console.error('‚ùå Generate Error:', err);
      alert('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÑ‡∏î‡πâ');
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤ SSO/‡∏†‡∏≤‡∏©‡∏µ
  const handleSubmitToSystems = async () => {
    try {
      const res = await fetch('http://localhost:5000/api/payroll/submit-all', {
        method: 'POST',
        credentials: 'include'
      });
      const data = await res.json();
      if (!res.ok) throw new Error(data.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
      alert(`‚úÖ ‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${data.message}`);
    } catch (err) {
      console.error('‚ùå Submit Error:', err);
      alert('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡πÑ‡∏î‡πâ');
    }
  };

  // -- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô summary ‡πÅ‡∏•‡∏∞ chart --
  const totalEmployees = employees.length;
  const completedTax = employees.filter((e) => e.tax).length;
  const pendingTax = totalEmployees - completedTax;
  const completedSSO = employees.filter((e) => e.sso).length;
  const pendingSSO = totalEmployees - completedSSO;

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡πÇ‡∏î‡∏ô‡∏±‡∏ó (Doughnut)
  const chartData = {
    labels: ['‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏†‡∏≤‡∏©‡∏µ', '‡∏™‡πà‡∏á‡∏†‡∏≤‡∏©‡∏µ‡πÅ‡∏•‡πâ‡∏ß', '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏áSSO', '‡∏™‡πà‡∏áSSO‡πÅ‡∏•‡πâ‡∏ß'],
    datasets: [
      {
        label: 'Summary',
        data: [pendingTax, completedTax, pendingSSO, completedSSO],
        backgroundColor: [
          '#facc15', // ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
          '#4ade80', // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
          '#fbbf24', // ‡∏™‡πâ‡∏°
          '#34d399'  // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏≠‡πà‡∏≠‡∏ô
        ]
      }
    ]
  };

  // ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (searchTerm)
  const filteredEmployees = employees.filter((emp) => {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠ (fullName) ‡∏´‡∏£‡∏∑‡∏≠ employeeCode
    const searchLower = searchTerm.toLowerCase();
    return (
      (emp.fullName && emp.fullName.toLowerCase().includes(searchLower)) ||
      (emp.employeeCode && emp.employeeCode.toLowerCase().includes(searchLower))
    );
  });

  // --- Pagination ---
  const indexOfLastEmployee = currentPage * employeesPerPage;
  const indexOfFirstEmployee = indexOfLastEmployee - employeesPerPage;
  const currentEmployees = filteredEmployees.slice(indexOfFirstEmployee, indexOfLastEmployee);

  const totalPages = Math.ceil(filteredEmployees.length / employeesPerPage);

  const handleChangePage = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  return (
    <div className="bg-gray-100 min-h-screen font-sans">
      {/* Sidebar */}
      <aside className="bg-red-600 text-white w-64 p-6 fixed h-full">
        <div className="mb-6">
          <img
            src="https://storage.googleapis.com/be8website.appspot.com/logo-scg-white.png"
            alt="SCG Logo"
            className="w-20 mb-4"
          />
          <h1 className="text-xl font-semibold">SCG Admin</h1>
          <p className="text-sm text-white/80">‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô</p>
        </div>
        <nav className="space-y-2 text-sm">
          <Link to="/admin" className="block py-2 hover:opacity-80"> ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°</Link>
          <Link to="/employee-management" className="block py-2 hover:opacity-80"> ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</Link>
          <Link to="/admin/finance" className="block py-2 hover:opacity-80 font-bold"> ‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô</Link>
          <Link to="/admin/reminders" className="block py-2 hover:opacity-80"> ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</Link>
          <Link to="/work-calendar" className="block py-2 hover:opacity-80"> ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô</Link>
          <Link to="/work-records" className="block py-2 hover:opacity-80"> ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤</Link>
          <button className="bg-white text-red-600 font-bold py-2 px-4 roundedhover:bg-gray-200 w-full mt-4">
            Logout
          </button>
        </nav>
      </aside>

      {/* Main Content */}
      <div className="ml-64 p-6">

        {/* Title */}
        <h2 className="text-2xl font-bold text-gray-800 mb-4"> ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô</h2>

        {/* Section: Summary Cards */}
        <div className="grid grid-cols-1 sm:grid-cols-4 gap-4 mb-6">
          <div className="bg-white rounded-xl shadow p-4">
            <p className="text-gray-500 text-sm">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏†‡∏≤‡∏©‡∏µ</p>
            <h3 className="text-2xl font-bold text-yellow-600">{pendingTax}</h3>
          </div>
          <div className="bg-white rounded-xl shadow p-4">
            <p className="text-gray-500 text-sm">‡∏™‡πà‡∏á‡∏†‡∏≤‡∏©‡∏µ‡πÅ‡∏•‡πâ‡∏ß</p>
            <h3 className="text-2xl font-bold text-green-600">{completedTax}</h3>
          </div>
          <div className="bg-white rounded-xl shadow p-4">
            <p className="text-gray-500 text-sm">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á SSO</p>
            <h3 className="text-2xl font-bold text-yellow-600">{pendingSSO}</h3>
          </div>
          <div className="bg-white rounded-xl shadow p-4">
            <p className="text-gray-500 text-sm">‡∏™‡πà‡∏á SSO ‡πÅ‡∏•‡πâ‡∏ß</p>
            <h3 className="text-2xl font-bold text-green-600">{completedSSO}</h3>
          </div>
        </div>

        {/* Section: Chart */}
        <div className="bg-white shadow rounded-xl p-6 mb-6">
          <h3 className="text-lg font-bold mb-4">‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (‡∏†‡∏≤‡∏©‡∏µ/SSO)</h3>
          <div className="max-w-xs mx-auto">
            <Doughnut data={chartData} />
          </div>
        </div>

        {/* Action Buttons */}
        <div className="bg-white shadow rounded-xl p-6 mb-6">
          <div className="flex flex-col sm:flex-row justify-between sm:items-center gap-4">
            <p className="text-gray-700 text-sm">
              ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Ñ‡∏£‡∏ö ‡πÄ‡∏ä‡πà‡∏ô ‡∏†‡∏≤‡∏©‡∏µ ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏±‡∏á‡∏Ñ‡∏°
            </p>
            <div className="flex flex-wrap gap-2">
              <button
                onClick={handleGenerateDocuments}
                className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 text-sm"
              >
                üìÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏†‡∏≤‡∏©‡∏µ / SSO
              </button>
              <button
                onClick={handleSubmitToSystems}
                className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 text-sm"
              >
                üì§ ‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏†‡∏≤‡∏©‡∏µ / SSO
              </button>
            </div>
          </div>
        </div>

        {/* Search Filter */}
        <div className="bg-white shadow rounded-xl p-6 mb-6">
          <div className="flex flex-col sm:flex-row items-center justify-between gap-4">
            <h3 className="text-lg font-bold">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</h3>
            <input
              type="text"
              className="border border-gray-300 rounded px-3 py-2 text-sm w-full sm:w-64"
              placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
        </div>

        {/* Table */}
        <div className="bg-white shadow rounded-xl p-6">
          <h3 className="text-lg font-bold mb-4"> ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</h3>
          <div className="overflow-x-auto">
            <table className="min-w-full text-sm text-center border-collapse">
              <thead className="bg-gray-100 text-gray-600">
                <tr>
                  <th className="p-2 border">‡∏£‡∏´‡∏±‡∏™</th>
                  <th className="p-2 border">‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•</th>
                  <th className="p-2 border">‡∏†‡∏≤‡∏©‡∏µ</th>
                  <th className="p-2 border">‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏±‡∏á‡∏Ñ‡∏°</th>
                  <th className="p-2 border">‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</th>
                </tr>
              </thead>
              <tbody>
                {currentEmployees.map((emp) => (
                  <tr key={emp.id} className="hover:bg-gray-50">
                    <td className="border p-2">{emp.employeeCode || `EMP${emp.id}`}</td>
                    <td className="border p-2 text-left">{emp.fullName}</td>
                    <td className="border p-2">
                      {emp.tax ? (
                        <span className="bg-green-200 text-green-800 text-xs px-2 py-1 rounded-full">‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß</span>
                      ) : (
                        <span className="bg-yellow-200 text-yellow-800 text-xs px-2 py-1 rounded-full">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á</span>
                      )}
                    </td>
                    <td className="border p-2">
                      {emp.sso ? (
                        <span className="bg-green-200 text-green-800 text-xs px-2 py-1 rounded-full">‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß</span>
                      ) : (
                        <span className="bg-yellow-200 text-yellow-800 text-xs px-2 py-1 rounded-full">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á</span>
                      )}
                    </td>
                    <td className="border p-2">
                      <button className="text-blue-600 hover:underline text-sm">‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {/* Pagination */}
          <div className="mt-4 flex items-center justify-center gap-2">
            {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
              <button
                key={page}
                onClick={() => handleChangePage(page)}
                className={`px-3 py-1 rounded border ${
                  currentPage === page
                    ? 'bg-blue-600 text-white'
                    : 'bg-white text-gray-700 hover:bg-gray-100'
                }`}
              >
                {page}
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}
