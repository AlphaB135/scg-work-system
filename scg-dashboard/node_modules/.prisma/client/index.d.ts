
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model WorkRecord
 * 
 */
export type WorkRecord = $Result.DefaultSelection<Prisma.$WorkRecordPayload>
/**
 * Model OTRequest
 * 
 */
export type OTRequest = $Result.DefaultSelection<Prisma.$OTRequestPayload>
/**
 * Model Reminder
 * 
 */
export type Reminder = $Result.DefaultSelection<Prisma.$ReminderPayload>
/**
 * Model PasswordStore
 * 
 */
export type PasswordStore = $Result.DefaultSelection<Prisma.$PasswordStorePayload>
/**
 * Model AdminLog
 * 
 */
export type AdminLog = $Result.DefaultSelection<Prisma.$AdminLogPayload>
/**
 * Model Explanation
 * 
 */
export type Explanation = $Result.DefaultSelection<Prisma.$ExplanationPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workRecord`: Exposes CRUD operations for the **WorkRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkRecords
    * const workRecords = await prisma.workRecord.findMany()
    * ```
    */
  get workRecord(): Prisma.WorkRecordDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.oTRequest`: Exposes CRUD operations for the **OTRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OTRequests
    * const oTRequests = await prisma.oTRequest.findMany()
    * ```
    */
  get oTRequest(): Prisma.OTRequestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reminder`: Exposes CRUD operations for the **Reminder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reminders
    * const reminders = await prisma.reminder.findMany()
    * ```
    */
  get reminder(): Prisma.ReminderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.passwordStore`: Exposes CRUD operations for the **PasswordStore** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PasswordStores
    * const passwordStores = await prisma.passwordStore.findMany()
    * ```
    */
  get passwordStore(): Prisma.PasswordStoreDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.adminLog`: Exposes CRUD operations for the **AdminLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdminLogs
    * const adminLogs = await prisma.adminLog.findMany()
    * ```
    */
  get adminLog(): Prisma.AdminLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.explanation`: Exposes CRUD operations for the **Explanation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Explanations
    * const explanations = await prisma.explanation.findMany()
    * ```
    */
  get explanation(): Prisma.ExplanationDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    WorkRecord: 'WorkRecord',
    OTRequest: 'OTRequest',
    Reminder: 'Reminder',
    PasswordStore: 'PasswordStore',
    AdminLog: 'AdminLog',
    Explanation: 'Explanation'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "workRecord" | "oTRequest" | "reminder" | "passwordStore" | "adminLog" | "explanation"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      WorkRecord: {
        payload: Prisma.$WorkRecordPayload<ExtArgs>
        fields: Prisma.WorkRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkRecordPayload>
          }
          findFirst: {
            args: Prisma.WorkRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkRecordPayload>
          }
          findMany: {
            args: Prisma.WorkRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkRecordPayload>[]
          }
          create: {
            args: Prisma.WorkRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkRecordPayload>
          }
          createMany: {
            args: Prisma.WorkRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.WorkRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkRecordPayload>
          }
          update: {
            args: Prisma.WorkRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkRecordPayload>
          }
          deleteMany: {
            args: Prisma.WorkRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WorkRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkRecordPayload>
          }
          aggregate: {
            args: Prisma.WorkRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkRecord>
          }
          groupBy: {
            args: Prisma.WorkRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkRecordCountArgs<ExtArgs>
            result: $Utils.Optional<WorkRecordCountAggregateOutputType> | number
          }
        }
      }
      OTRequest: {
        payload: Prisma.$OTRequestPayload<ExtArgs>
        fields: Prisma.OTRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OTRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OTRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTRequestPayload>
          }
          findFirst: {
            args: Prisma.OTRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OTRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTRequestPayload>
          }
          findMany: {
            args: Prisma.OTRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTRequestPayload>[]
          }
          create: {
            args: Prisma.OTRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTRequestPayload>
          }
          createMany: {
            args: Prisma.OTRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OTRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTRequestPayload>
          }
          update: {
            args: Prisma.OTRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTRequestPayload>
          }
          deleteMany: {
            args: Prisma.OTRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OTRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OTRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OTRequestPayload>
          }
          aggregate: {
            args: Prisma.OTRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOTRequest>
          }
          groupBy: {
            args: Prisma.OTRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<OTRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.OTRequestCountArgs<ExtArgs>
            result: $Utils.Optional<OTRequestCountAggregateOutputType> | number
          }
        }
      }
      Reminder: {
        payload: Prisma.$ReminderPayload<ExtArgs>
        fields: Prisma.ReminderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReminderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReminderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReminderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReminderPayload>
          }
          findFirst: {
            args: Prisma.ReminderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReminderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReminderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReminderPayload>
          }
          findMany: {
            args: Prisma.ReminderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReminderPayload>[]
          }
          create: {
            args: Prisma.ReminderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReminderPayload>
          }
          createMany: {
            args: Prisma.ReminderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ReminderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReminderPayload>
          }
          update: {
            args: Prisma.ReminderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReminderPayload>
          }
          deleteMany: {
            args: Prisma.ReminderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReminderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReminderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReminderPayload>
          }
          aggregate: {
            args: Prisma.ReminderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReminder>
          }
          groupBy: {
            args: Prisma.ReminderGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReminderGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReminderCountArgs<ExtArgs>
            result: $Utils.Optional<ReminderCountAggregateOutputType> | number
          }
        }
      }
      PasswordStore: {
        payload: Prisma.$PasswordStorePayload<ExtArgs>
        fields: Prisma.PasswordStoreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PasswordStoreFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordStorePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PasswordStoreFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordStorePayload>
          }
          findFirst: {
            args: Prisma.PasswordStoreFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordStorePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PasswordStoreFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordStorePayload>
          }
          findMany: {
            args: Prisma.PasswordStoreFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordStorePayload>[]
          }
          create: {
            args: Prisma.PasswordStoreCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordStorePayload>
          }
          createMany: {
            args: Prisma.PasswordStoreCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PasswordStoreDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordStorePayload>
          }
          update: {
            args: Prisma.PasswordStoreUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordStorePayload>
          }
          deleteMany: {
            args: Prisma.PasswordStoreDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PasswordStoreUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PasswordStoreUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordStorePayload>
          }
          aggregate: {
            args: Prisma.PasswordStoreAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePasswordStore>
          }
          groupBy: {
            args: Prisma.PasswordStoreGroupByArgs<ExtArgs>
            result: $Utils.Optional<PasswordStoreGroupByOutputType>[]
          }
          count: {
            args: Prisma.PasswordStoreCountArgs<ExtArgs>
            result: $Utils.Optional<PasswordStoreCountAggregateOutputType> | number
          }
        }
      }
      AdminLog: {
        payload: Prisma.$AdminLogPayload<ExtArgs>
        fields: Prisma.AdminLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload>
          }
          findFirst: {
            args: Prisma.AdminLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload>
          }
          findMany: {
            args: Prisma.AdminLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload>[]
          }
          create: {
            args: Prisma.AdminLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload>
          }
          createMany: {
            args: Prisma.AdminLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AdminLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload>
          }
          update: {
            args: Prisma.AdminLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload>
          }
          deleteMany: {
            args: Prisma.AdminLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AdminLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminLogPayload>
          }
          aggregate: {
            args: Prisma.AdminLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdminLog>
          }
          groupBy: {
            args: Prisma.AdminLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminLogCountArgs<ExtArgs>
            result: $Utils.Optional<AdminLogCountAggregateOutputType> | number
          }
        }
      }
      Explanation: {
        payload: Prisma.$ExplanationPayload<ExtArgs>
        fields: Prisma.ExplanationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExplanationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExplanationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExplanationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExplanationPayload>
          }
          findFirst: {
            args: Prisma.ExplanationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExplanationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExplanationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExplanationPayload>
          }
          findMany: {
            args: Prisma.ExplanationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExplanationPayload>[]
          }
          create: {
            args: Prisma.ExplanationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExplanationPayload>
          }
          createMany: {
            args: Prisma.ExplanationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ExplanationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExplanationPayload>
          }
          update: {
            args: Prisma.ExplanationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExplanationPayload>
          }
          deleteMany: {
            args: Prisma.ExplanationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExplanationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ExplanationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExplanationPayload>
          }
          aggregate: {
            args: Prisma.ExplanationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExplanation>
          }
          groupBy: {
            args: Prisma.ExplanationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExplanationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExplanationCountArgs<ExtArgs>
            result: $Utils.Optional<ExplanationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    workRecord?: WorkRecordOmit
    oTRequest?: OTRequestOmit
    reminder?: ReminderOmit
    passwordStore?: PasswordStoreOmit
    adminLog?: AdminLogOmit
    explanation?: ExplanationOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    explanations: number
    workRecords: number
    otRequests: number
    adminLogs: number
    passwordStore: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    explanations?: boolean | UserCountOutputTypeCountExplanationsArgs
    workRecords?: boolean | UserCountOutputTypeCountWorkRecordsArgs
    otRequests?: boolean | UserCountOutputTypeCountOtRequestsArgs
    adminLogs?: boolean | UserCountOutputTypeCountAdminLogsArgs
    passwordStore?: boolean | UserCountOutputTypeCountPasswordStoreArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountExplanationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExplanationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWorkRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkRecordWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOtRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OTRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAdminLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPasswordStoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordStoreWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    salary: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    salary: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    role: string | null
    fullName: string | null
    email: string | null
    position: string | null
    department: string | null
    company: string | null
    branch: string | null
    phone: string | null
    salary: number | null
    employeeCode: string | null
    employeeType: string | null
    employeeGroup: string | null
    effectiveDate: Date | null
    beginDate: Date | null
    sso: boolean | null
    tax: boolean | null
    payrollRound: string | null
    salaryRound: string | null
    individualSetting: string | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    role: string | null
    fullName: string | null
    email: string | null
    position: string | null
    department: string | null
    company: string | null
    branch: string | null
    phone: string | null
    salary: number | null
    employeeCode: string | null
    employeeType: string | null
    employeeGroup: string | null
    effectiveDate: Date | null
    beginDate: Date | null
    sso: boolean | null
    tax: boolean | null
    payrollRound: string | null
    salaryRound: string | null
    individualSetting: string | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    password: number
    role: number
    fullName: number
    email: number
    position: number
    department: number
    company: number
    branch: number
    phone: number
    salary: number
    employeeCode: number
    employeeType: number
    employeeGroup: number
    effectiveDate: number
    beginDate: number
    sso: number
    tax: number
    payrollRound: number
    salaryRound: number
    individualSetting: number
    createdAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    salary?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    salary?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    role?: true
    fullName?: true
    email?: true
    position?: true
    department?: true
    company?: true
    branch?: true
    phone?: true
    salary?: true
    employeeCode?: true
    employeeType?: true
    employeeGroup?: true
    effectiveDate?: true
    beginDate?: true
    sso?: true
    tax?: true
    payrollRound?: true
    salaryRound?: true
    individualSetting?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    role?: true
    fullName?: true
    email?: true
    position?: true
    department?: true
    company?: true
    branch?: true
    phone?: true
    salary?: true
    employeeCode?: true
    employeeType?: true
    employeeGroup?: true
    effectiveDate?: true
    beginDate?: true
    sso?: true
    tax?: true
    payrollRound?: true
    salaryRound?: true
    individualSetting?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    role?: true
    fullName?: true
    email?: true
    position?: true
    department?: true
    company?: true
    branch?: true
    phone?: true
    salary?: true
    employeeCode?: true
    employeeType?: true
    employeeGroup?: true
    effectiveDate?: true
    beginDate?: true
    sso?: true
    tax?: true
    payrollRound?: true
    salaryRound?: true
    individualSetting?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    username: string
    password: string
    role: string
    fullName: string
    email: string
    position: string | null
    department: string | null
    company: string | null
    branch: string | null
    phone: string | null
    salary: number | null
    employeeCode: string | null
    employeeType: string | null
    employeeGroup: string | null
    effectiveDate: Date | null
    beginDate: Date | null
    sso: boolean | null
    tax: boolean | null
    payrollRound: string | null
    salaryRound: string | null
    individualSetting: string | null
    createdAt: Date | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    fullName?: boolean
    email?: boolean
    position?: boolean
    department?: boolean
    company?: boolean
    branch?: boolean
    phone?: boolean
    salary?: boolean
    employeeCode?: boolean
    employeeType?: boolean
    employeeGroup?: boolean
    effectiveDate?: boolean
    beginDate?: boolean
    sso?: boolean
    tax?: boolean
    payrollRound?: boolean
    salaryRound?: boolean
    individualSetting?: boolean
    createdAt?: boolean
    explanations?: boolean | User$explanationsArgs<ExtArgs>
    workRecords?: boolean | User$workRecordsArgs<ExtArgs>
    otRequests?: boolean | User$otRequestsArgs<ExtArgs>
    adminLogs?: boolean | User$adminLogsArgs<ExtArgs>
    passwordStore?: boolean | User$passwordStoreArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    fullName?: boolean
    email?: boolean
    position?: boolean
    department?: boolean
    company?: boolean
    branch?: boolean
    phone?: boolean
    salary?: boolean
    employeeCode?: boolean
    employeeType?: boolean
    employeeGroup?: boolean
    effectiveDate?: boolean
    beginDate?: boolean
    sso?: boolean
    tax?: boolean
    payrollRound?: boolean
    salaryRound?: boolean
    individualSetting?: boolean
    createdAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "password" | "role" | "fullName" | "email" | "position" | "department" | "company" | "branch" | "phone" | "salary" | "employeeCode" | "employeeType" | "employeeGroup" | "effectiveDate" | "beginDate" | "sso" | "tax" | "payrollRound" | "salaryRound" | "individualSetting" | "createdAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    explanations?: boolean | User$explanationsArgs<ExtArgs>
    workRecords?: boolean | User$workRecordsArgs<ExtArgs>
    otRequests?: boolean | User$otRequestsArgs<ExtArgs>
    adminLogs?: boolean | User$adminLogsArgs<ExtArgs>
    passwordStore?: boolean | User$passwordStoreArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      explanations: Prisma.$ExplanationPayload<ExtArgs>[]
      workRecords: Prisma.$WorkRecordPayload<ExtArgs>[]
      otRequests: Prisma.$OTRequestPayload<ExtArgs>[]
      adminLogs: Prisma.$AdminLogPayload<ExtArgs>[]
      passwordStore: Prisma.$PasswordStorePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      password: string
      role: string
      fullName: string
      email: string
      position: string | null
      department: string | null
      company: string | null
      branch: string | null
      phone: string | null
      salary: number | null
      employeeCode: string | null
      employeeType: string | null
      employeeGroup: string | null
      effectiveDate: Date | null
      beginDate: Date | null
      sso: boolean | null
      tax: boolean | null
      payrollRound: string | null
      salaryRound: string | null
      individualSetting: string | null
      createdAt: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    explanations<T extends User$explanationsArgs<ExtArgs> = {}>(args?: Subset<T, User$explanationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExplanationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workRecords<T extends User$workRecordsArgs<ExtArgs> = {}>(args?: Subset<T, User$workRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    otRequests<T extends User$otRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$otRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OTRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    adminLogs<T extends User$adminLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$adminLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    passwordStore<T extends User$passwordStoreArgs<ExtArgs> = {}>(args?: Subset<T, User$passwordStoreArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordStorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly fullName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly position: FieldRef<"User", 'String'>
    readonly department: FieldRef<"User", 'String'>
    readonly company: FieldRef<"User", 'String'>
    readonly branch: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly salary: FieldRef<"User", 'Float'>
    readonly employeeCode: FieldRef<"User", 'String'>
    readonly employeeType: FieldRef<"User", 'String'>
    readonly employeeGroup: FieldRef<"User", 'String'>
    readonly effectiveDate: FieldRef<"User", 'DateTime'>
    readonly beginDate: FieldRef<"User", 'DateTime'>
    readonly sso: FieldRef<"User", 'Boolean'>
    readonly tax: FieldRef<"User", 'Boolean'>
    readonly payrollRound: FieldRef<"User", 'String'>
    readonly salaryRound: FieldRef<"User", 'String'>
    readonly individualSetting: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.explanations
   */
  export type User$explanationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Explanation
     */
    select?: ExplanationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Explanation
     */
    omit?: ExplanationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExplanationInclude<ExtArgs> | null
    where?: ExplanationWhereInput
    orderBy?: ExplanationOrderByWithRelationInput | ExplanationOrderByWithRelationInput[]
    cursor?: ExplanationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExplanationScalarFieldEnum | ExplanationScalarFieldEnum[]
  }

  /**
   * User.workRecords
   */
  export type User$workRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkRecord
     */
    select?: WorkRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkRecord
     */
    omit?: WorkRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkRecordInclude<ExtArgs> | null
    where?: WorkRecordWhereInput
    orderBy?: WorkRecordOrderByWithRelationInput | WorkRecordOrderByWithRelationInput[]
    cursor?: WorkRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkRecordScalarFieldEnum | WorkRecordScalarFieldEnum[]
  }

  /**
   * User.otRequests
   */
  export type User$otRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTRequest
     */
    select?: OTRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTRequest
     */
    omit?: OTRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OTRequestInclude<ExtArgs> | null
    where?: OTRequestWhereInput
    orderBy?: OTRequestOrderByWithRelationInput | OTRequestOrderByWithRelationInput[]
    cursor?: OTRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OTRequestScalarFieldEnum | OTRequestScalarFieldEnum[]
  }

  /**
   * User.adminLogs
   */
  export type User$adminLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminLog
     */
    omit?: AdminLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminLogInclude<ExtArgs> | null
    where?: AdminLogWhereInput
    orderBy?: AdminLogOrderByWithRelationInput | AdminLogOrderByWithRelationInput[]
    cursor?: AdminLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdminLogScalarFieldEnum | AdminLogScalarFieldEnum[]
  }

  /**
   * User.passwordStore
   */
  export type User$passwordStoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordStore
     */
    select?: PasswordStoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordStore
     */
    omit?: PasswordStoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordStoreInclude<ExtArgs> | null
    where?: PasswordStoreWhereInput
    orderBy?: PasswordStoreOrderByWithRelationInput | PasswordStoreOrderByWithRelationInput[]
    cursor?: PasswordStoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PasswordStoreScalarFieldEnum | PasswordStoreScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model WorkRecord
   */

  export type AggregateWorkRecord = {
    _count: WorkRecordCountAggregateOutputType | null
    _avg: WorkRecordAvgAggregateOutputType | null
    _sum: WorkRecordSumAggregateOutputType | null
    _min: WorkRecordMinAggregateOutputType | null
    _max: WorkRecordMaxAggregateOutputType | null
  }

  export type WorkRecordAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    workHours: number | null
    overtime: number | null
  }

  export type WorkRecordSumAggregateOutputType = {
    id: number | null
    userId: number | null
    workHours: number | null
    overtime: number | null
  }

  export type WorkRecordMinAggregateOutputType = {
    id: number | null
    userId: number | null
    date: Date | null
    workHours: number | null
    overtime: number | null
    shiftStart: string | null
    shiftEnd: string | null
    status: string | null
    note: string | null
    clockIn: Date | null
    clockOut: Date | null
  }

  export type WorkRecordMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    date: Date | null
    workHours: number | null
    overtime: number | null
    shiftStart: string | null
    shiftEnd: string | null
    status: string | null
    note: string | null
    clockIn: Date | null
    clockOut: Date | null
  }

  export type WorkRecordCountAggregateOutputType = {
    id: number
    userId: number
    date: number
    workHours: number
    overtime: number
    shiftStart: number
    shiftEnd: number
    status: number
    note: number
    clockIn: number
    clockOut: number
    _all: number
  }


  export type WorkRecordAvgAggregateInputType = {
    id?: true
    userId?: true
    workHours?: true
    overtime?: true
  }

  export type WorkRecordSumAggregateInputType = {
    id?: true
    userId?: true
    workHours?: true
    overtime?: true
  }

  export type WorkRecordMinAggregateInputType = {
    id?: true
    userId?: true
    date?: true
    workHours?: true
    overtime?: true
    shiftStart?: true
    shiftEnd?: true
    status?: true
    note?: true
    clockIn?: true
    clockOut?: true
  }

  export type WorkRecordMaxAggregateInputType = {
    id?: true
    userId?: true
    date?: true
    workHours?: true
    overtime?: true
    shiftStart?: true
    shiftEnd?: true
    status?: true
    note?: true
    clockIn?: true
    clockOut?: true
  }

  export type WorkRecordCountAggregateInputType = {
    id?: true
    userId?: true
    date?: true
    workHours?: true
    overtime?: true
    shiftStart?: true
    shiftEnd?: true
    status?: true
    note?: true
    clockIn?: true
    clockOut?: true
    _all?: true
  }

  export type WorkRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkRecord to aggregate.
     */
    where?: WorkRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkRecords to fetch.
     */
    orderBy?: WorkRecordOrderByWithRelationInput | WorkRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkRecords
    **/
    _count?: true | WorkRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkRecordMaxAggregateInputType
  }

  export type GetWorkRecordAggregateType<T extends WorkRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkRecord[P]>
      : GetScalarType<T[P], AggregateWorkRecord[P]>
  }




  export type WorkRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkRecordWhereInput
    orderBy?: WorkRecordOrderByWithAggregationInput | WorkRecordOrderByWithAggregationInput[]
    by: WorkRecordScalarFieldEnum[] | WorkRecordScalarFieldEnum
    having?: WorkRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkRecordCountAggregateInputType | true
    _avg?: WorkRecordAvgAggregateInputType
    _sum?: WorkRecordSumAggregateInputType
    _min?: WorkRecordMinAggregateInputType
    _max?: WorkRecordMaxAggregateInputType
  }

  export type WorkRecordGroupByOutputType = {
    id: number
    userId: number
    date: Date
    workHours: number | null
    overtime: number | null
    shiftStart: string | null
    shiftEnd: string | null
    status: string | null
    note: string | null
    clockIn: Date | null
    clockOut: Date | null
    _count: WorkRecordCountAggregateOutputType | null
    _avg: WorkRecordAvgAggregateOutputType | null
    _sum: WorkRecordSumAggregateOutputType | null
    _min: WorkRecordMinAggregateOutputType | null
    _max: WorkRecordMaxAggregateOutputType | null
  }

  type GetWorkRecordGroupByPayload<T extends WorkRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkRecordGroupByOutputType[P]>
            : GetScalarType<T[P], WorkRecordGroupByOutputType[P]>
        }
      >
    >


  export type WorkRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    date?: boolean
    workHours?: boolean
    overtime?: boolean
    shiftStart?: boolean
    shiftEnd?: boolean
    status?: boolean
    note?: boolean
    clockIn?: boolean
    clockOut?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workRecord"]>



  export type WorkRecordSelectScalar = {
    id?: boolean
    userId?: boolean
    date?: boolean
    workHours?: boolean
    overtime?: boolean
    shiftStart?: boolean
    shiftEnd?: boolean
    status?: boolean
    note?: boolean
    clockIn?: boolean
    clockOut?: boolean
  }

  export type WorkRecordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "date" | "workHours" | "overtime" | "shiftStart" | "shiftEnd" | "status" | "note" | "clockIn" | "clockOut", ExtArgs["result"]["workRecord"]>
  export type WorkRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WorkRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkRecord"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      date: Date
      workHours: number | null
      overtime: number | null
      shiftStart: string | null
      shiftEnd: string | null
      status: string | null
      note: string | null
      clockIn: Date | null
      clockOut: Date | null
    }, ExtArgs["result"]["workRecord"]>
    composites: {}
  }

  type WorkRecordGetPayload<S extends boolean | null | undefined | WorkRecordDefaultArgs> = $Result.GetResult<Prisma.$WorkRecordPayload, S>

  type WorkRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkRecordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkRecordCountAggregateInputType | true
    }

  export interface WorkRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkRecord'], meta: { name: 'WorkRecord' } }
    /**
     * Find zero or one WorkRecord that matches the filter.
     * @param {WorkRecordFindUniqueArgs} args - Arguments to find a WorkRecord
     * @example
     * // Get one WorkRecord
     * const workRecord = await prisma.workRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkRecordFindUniqueArgs>(args: SelectSubset<T, WorkRecordFindUniqueArgs<ExtArgs>>): Prisma__WorkRecordClient<$Result.GetResult<Prisma.$WorkRecordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkRecord that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkRecordFindUniqueOrThrowArgs} args - Arguments to find a WorkRecord
     * @example
     * // Get one WorkRecord
     * const workRecord = await prisma.workRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkRecordClient<$Result.GetResult<Prisma.$WorkRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkRecordFindFirstArgs} args - Arguments to find a WorkRecord
     * @example
     * // Get one WorkRecord
     * const workRecord = await prisma.workRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkRecordFindFirstArgs>(args?: SelectSubset<T, WorkRecordFindFirstArgs<ExtArgs>>): Prisma__WorkRecordClient<$Result.GetResult<Prisma.$WorkRecordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkRecordFindFirstOrThrowArgs} args - Arguments to find a WorkRecord
     * @example
     * // Get one WorkRecord
     * const workRecord = await prisma.workRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkRecordClient<$Result.GetResult<Prisma.$WorkRecordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkRecords
     * const workRecords = await prisma.workRecord.findMany()
     * 
     * // Get first 10 WorkRecords
     * const workRecords = await prisma.workRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workRecordWithIdOnly = await prisma.workRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkRecordFindManyArgs>(args?: SelectSubset<T, WorkRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkRecord.
     * @param {WorkRecordCreateArgs} args - Arguments to create a WorkRecord.
     * @example
     * // Create one WorkRecord
     * const WorkRecord = await prisma.workRecord.create({
     *   data: {
     *     // ... data to create a WorkRecord
     *   }
     * })
     * 
     */
    create<T extends WorkRecordCreateArgs>(args: SelectSubset<T, WorkRecordCreateArgs<ExtArgs>>): Prisma__WorkRecordClient<$Result.GetResult<Prisma.$WorkRecordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkRecords.
     * @param {WorkRecordCreateManyArgs} args - Arguments to create many WorkRecords.
     * @example
     * // Create many WorkRecords
     * const workRecord = await prisma.workRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkRecordCreateManyArgs>(args?: SelectSubset<T, WorkRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WorkRecord.
     * @param {WorkRecordDeleteArgs} args - Arguments to delete one WorkRecord.
     * @example
     * // Delete one WorkRecord
     * const WorkRecord = await prisma.workRecord.delete({
     *   where: {
     *     // ... filter to delete one WorkRecord
     *   }
     * })
     * 
     */
    delete<T extends WorkRecordDeleteArgs>(args: SelectSubset<T, WorkRecordDeleteArgs<ExtArgs>>): Prisma__WorkRecordClient<$Result.GetResult<Prisma.$WorkRecordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkRecord.
     * @param {WorkRecordUpdateArgs} args - Arguments to update one WorkRecord.
     * @example
     * // Update one WorkRecord
     * const workRecord = await prisma.workRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkRecordUpdateArgs>(args: SelectSubset<T, WorkRecordUpdateArgs<ExtArgs>>): Prisma__WorkRecordClient<$Result.GetResult<Prisma.$WorkRecordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkRecords.
     * @param {WorkRecordDeleteManyArgs} args - Arguments to filter WorkRecords to delete.
     * @example
     * // Delete a few WorkRecords
     * const { count } = await prisma.workRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkRecordDeleteManyArgs>(args?: SelectSubset<T, WorkRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkRecords
     * const workRecord = await prisma.workRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkRecordUpdateManyArgs>(args: SelectSubset<T, WorkRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkRecord.
     * @param {WorkRecordUpsertArgs} args - Arguments to update or create a WorkRecord.
     * @example
     * // Update or create a WorkRecord
     * const workRecord = await prisma.workRecord.upsert({
     *   create: {
     *     // ... data to create a WorkRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkRecord we want to update
     *   }
     * })
     */
    upsert<T extends WorkRecordUpsertArgs>(args: SelectSubset<T, WorkRecordUpsertArgs<ExtArgs>>): Prisma__WorkRecordClient<$Result.GetResult<Prisma.$WorkRecordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkRecordCountArgs} args - Arguments to filter WorkRecords to count.
     * @example
     * // Count the number of WorkRecords
     * const count = await prisma.workRecord.count({
     *   where: {
     *     // ... the filter for the WorkRecords we want to count
     *   }
     * })
    **/
    count<T extends WorkRecordCountArgs>(
      args?: Subset<T, WorkRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkRecordAggregateArgs>(args: Subset<T, WorkRecordAggregateArgs>): Prisma.PrismaPromise<GetWorkRecordAggregateType<T>>

    /**
     * Group by WorkRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkRecordGroupByArgs['orderBy'] }
        : { orderBy?: WorkRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkRecord model
   */
  readonly fields: WorkRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkRecord model
   */
  interface WorkRecordFieldRefs {
    readonly id: FieldRef<"WorkRecord", 'Int'>
    readonly userId: FieldRef<"WorkRecord", 'Int'>
    readonly date: FieldRef<"WorkRecord", 'DateTime'>
    readonly workHours: FieldRef<"WorkRecord", 'Float'>
    readonly overtime: FieldRef<"WorkRecord", 'Float'>
    readonly shiftStart: FieldRef<"WorkRecord", 'String'>
    readonly shiftEnd: FieldRef<"WorkRecord", 'String'>
    readonly status: FieldRef<"WorkRecord", 'String'>
    readonly note: FieldRef<"WorkRecord", 'String'>
    readonly clockIn: FieldRef<"WorkRecord", 'DateTime'>
    readonly clockOut: FieldRef<"WorkRecord", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkRecord findUnique
   */
  export type WorkRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkRecord
     */
    select?: WorkRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkRecord
     */
    omit?: WorkRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkRecordInclude<ExtArgs> | null
    /**
     * Filter, which WorkRecord to fetch.
     */
    where: WorkRecordWhereUniqueInput
  }

  /**
   * WorkRecord findUniqueOrThrow
   */
  export type WorkRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkRecord
     */
    select?: WorkRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkRecord
     */
    omit?: WorkRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkRecordInclude<ExtArgs> | null
    /**
     * Filter, which WorkRecord to fetch.
     */
    where: WorkRecordWhereUniqueInput
  }

  /**
   * WorkRecord findFirst
   */
  export type WorkRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkRecord
     */
    select?: WorkRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkRecord
     */
    omit?: WorkRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkRecordInclude<ExtArgs> | null
    /**
     * Filter, which WorkRecord to fetch.
     */
    where?: WorkRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkRecords to fetch.
     */
    orderBy?: WorkRecordOrderByWithRelationInput | WorkRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkRecords.
     */
    cursor?: WorkRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkRecords.
     */
    distinct?: WorkRecordScalarFieldEnum | WorkRecordScalarFieldEnum[]
  }

  /**
   * WorkRecord findFirstOrThrow
   */
  export type WorkRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkRecord
     */
    select?: WorkRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkRecord
     */
    omit?: WorkRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkRecordInclude<ExtArgs> | null
    /**
     * Filter, which WorkRecord to fetch.
     */
    where?: WorkRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkRecords to fetch.
     */
    orderBy?: WorkRecordOrderByWithRelationInput | WorkRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkRecords.
     */
    cursor?: WorkRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkRecords.
     */
    distinct?: WorkRecordScalarFieldEnum | WorkRecordScalarFieldEnum[]
  }

  /**
   * WorkRecord findMany
   */
  export type WorkRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkRecord
     */
    select?: WorkRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkRecord
     */
    omit?: WorkRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkRecordInclude<ExtArgs> | null
    /**
     * Filter, which WorkRecords to fetch.
     */
    where?: WorkRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkRecords to fetch.
     */
    orderBy?: WorkRecordOrderByWithRelationInput | WorkRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkRecords.
     */
    cursor?: WorkRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkRecords.
     */
    skip?: number
    distinct?: WorkRecordScalarFieldEnum | WorkRecordScalarFieldEnum[]
  }

  /**
   * WorkRecord create
   */
  export type WorkRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkRecord
     */
    select?: WorkRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkRecord
     */
    omit?: WorkRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkRecord.
     */
    data: XOR<WorkRecordCreateInput, WorkRecordUncheckedCreateInput>
  }

  /**
   * WorkRecord createMany
   */
  export type WorkRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkRecords.
     */
    data: WorkRecordCreateManyInput | WorkRecordCreateManyInput[]
  }

  /**
   * WorkRecord update
   */
  export type WorkRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkRecord
     */
    select?: WorkRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkRecord
     */
    omit?: WorkRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkRecord.
     */
    data: XOR<WorkRecordUpdateInput, WorkRecordUncheckedUpdateInput>
    /**
     * Choose, which WorkRecord to update.
     */
    where: WorkRecordWhereUniqueInput
  }

  /**
   * WorkRecord updateMany
   */
  export type WorkRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkRecords.
     */
    data: XOR<WorkRecordUpdateManyMutationInput, WorkRecordUncheckedUpdateManyInput>
    /**
     * Filter which WorkRecords to update
     */
    where?: WorkRecordWhereInput
    /**
     * Limit how many WorkRecords to update.
     */
    limit?: number
  }

  /**
   * WorkRecord upsert
   */
  export type WorkRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkRecord
     */
    select?: WorkRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkRecord
     */
    omit?: WorkRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkRecord to update in case it exists.
     */
    where: WorkRecordWhereUniqueInput
    /**
     * In case the WorkRecord found by the `where` argument doesn't exist, create a new WorkRecord with this data.
     */
    create: XOR<WorkRecordCreateInput, WorkRecordUncheckedCreateInput>
    /**
     * In case the WorkRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkRecordUpdateInput, WorkRecordUncheckedUpdateInput>
  }

  /**
   * WorkRecord delete
   */
  export type WorkRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkRecord
     */
    select?: WorkRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkRecord
     */
    omit?: WorkRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkRecordInclude<ExtArgs> | null
    /**
     * Filter which WorkRecord to delete.
     */
    where: WorkRecordWhereUniqueInput
  }

  /**
   * WorkRecord deleteMany
   */
  export type WorkRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkRecords to delete
     */
    where?: WorkRecordWhereInput
    /**
     * Limit how many WorkRecords to delete.
     */
    limit?: number
  }

  /**
   * WorkRecord without action
   */
  export type WorkRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkRecord
     */
    select?: WorkRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkRecord
     */
    omit?: WorkRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkRecordInclude<ExtArgs> | null
  }


  /**
   * Model OTRequest
   */

  export type AggregateOTRequest = {
    _count: OTRequestCountAggregateOutputType | null
    _avg: OTRequestAvgAggregateOutputType | null
    _sum: OTRequestSumAggregateOutputType | null
    _min: OTRequestMinAggregateOutputType | null
    _max: OTRequestMaxAggregateOutputType | null
  }

  export type OTRequestAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    hours: number | null
    approverId: number | null
  }

  export type OTRequestSumAggregateOutputType = {
    id: number | null
    userId: number | null
    hours: number | null
    approverId: number | null
  }

  export type OTRequestMinAggregateOutputType = {
    id: number | null
    userId: number | null
    date: Date | null
    reason: string | null
    hours: number | null
    approved: boolean | null
    approverId: number | null
    createdAt: Date | null
  }

  export type OTRequestMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    date: Date | null
    reason: string | null
    hours: number | null
    approved: boolean | null
    approverId: number | null
    createdAt: Date | null
  }

  export type OTRequestCountAggregateOutputType = {
    id: number
    userId: number
    date: number
    reason: number
    hours: number
    approved: number
    approverId: number
    createdAt: number
    _all: number
  }


  export type OTRequestAvgAggregateInputType = {
    id?: true
    userId?: true
    hours?: true
    approverId?: true
  }

  export type OTRequestSumAggregateInputType = {
    id?: true
    userId?: true
    hours?: true
    approverId?: true
  }

  export type OTRequestMinAggregateInputType = {
    id?: true
    userId?: true
    date?: true
    reason?: true
    hours?: true
    approved?: true
    approverId?: true
    createdAt?: true
  }

  export type OTRequestMaxAggregateInputType = {
    id?: true
    userId?: true
    date?: true
    reason?: true
    hours?: true
    approved?: true
    approverId?: true
    createdAt?: true
  }

  export type OTRequestCountAggregateInputType = {
    id?: true
    userId?: true
    date?: true
    reason?: true
    hours?: true
    approved?: true
    approverId?: true
    createdAt?: true
    _all?: true
  }

  export type OTRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OTRequest to aggregate.
     */
    where?: OTRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OTRequests to fetch.
     */
    orderBy?: OTRequestOrderByWithRelationInput | OTRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OTRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OTRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OTRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OTRequests
    **/
    _count?: true | OTRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OTRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OTRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OTRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OTRequestMaxAggregateInputType
  }

  export type GetOTRequestAggregateType<T extends OTRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateOTRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOTRequest[P]>
      : GetScalarType<T[P], AggregateOTRequest[P]>
  }




  export type OTRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OTRequestWhereInput
    orderBy?: OTRequestOrderByWithAggregationInput | OTRequestOrderByWithAggregationInput[]
    by: OTRequestScalarFieldEnum[] | OTRequestScalarFieldEnum
    having?: OTRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OTRequestCountAggregateInputType | true
    _avg?: OTRequestAvgAggregateInputType
    _sum?: OTRequestSumAggregateInputType
    _min?: OTRequestMinAggregateInputType
    _max?: OTRequestMaxAggregateInputType
  }

  export type OTRequestGroupByOutputType = {
    id: number
    userId: number
    date: Date
    reason: string
    hours: number
    approved: boolean | null
    approverId: number | null
    createdAt: Date | null
    _count: OTRequestCountAggregateOutputType | null
    _avg: OTRequestAvgAggregateOutputType | null
    _sum: OTRequestSumAggregateOutputType | null
    _min: OTRequestMinAggregateOutputType | null
    _max: OTRequestMaxAggregateOutputType | null
  }

  type GetOTRequestGroupByPayload<T extends OTRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OTRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OTRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OTRequestGroupByOutputType[P]>
            : GetScalarType<T[P], OTRequestGroupByOutputType[P]>
        }
      >
    >


  export type OTRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    date?: boolean
    reason?: boolean
    hours?: boolean
    approved?: boolean
    approverId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["oTRequest"]>



  export type OTRequestSelectScalar = {
    id?: boolean
    userId?: boolean
    date?: boolean
    reason?: boolean
    hours?: boolean
    approved?: boolean
    approverId?: boolean
    createdAt?: boolean
  }

  export type OTRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "date" | "reason" | "hours" | "approved" | "approverId" | "createdAt", ExtArgs["result"]["oTRequest"]>
  export type OTRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $OTRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OTRequest"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      date: Date
      reason: string
      hours: number
      approved: boolean | null
      approverId: number | null
      createdAt: Date | null
    }, ExtArgs["result"]["oTRequest"]>
    composites: {}
  }

  type OTRequestGetPayload<S extends boolean | null | undefined | OTRequestDefaultArgs> = $Result.GetResult<Prisma.$OTRequestPayload, S>

  type OTRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OTRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OTRequestCountAggregateInputType | true
    }

  export interface OTRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OTRequest'], meta: { name: 'OTRequest' } }
    /**
     * Find zero or one OTRequest that matches the filter.
     * @param {OTRequestFindUniqueArgs} args - Arguments to find a OTRequest
     * @example
     * // Get one OTRequest
     * const oTRequest = await prisma.oTRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OTRequestFindUniqueArgs>(args: SelectSubset<T, OTRequestFindUniqueArgs<ExtArgs>>): Prisma__OTRequestClient<$Result.GetResult<Prisma.$OTRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OTRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OTRequestFindUniqueOrThrowArgs} args - Arguments to find a OTRequest
     * @example
     * // Get one OTRequest
     * const oTRequest = await prisma.oTRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OTRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, OTRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OTRequestClient<$Result.GetResult<Prisma.$OTRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OTRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTRequestFindFirstArgs} args - Arguments to find a OTRequest
     * @example
     * // Get one OTRequest
     * const oTRequest = await prisma.oTRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OTRequestFindFirstArgs>(args?: SelectSubset<T, OTRequestFindFirstArgs<ExtArgs>>): Prisma__OTRequestClient<$Result.GetResult<Prisma.$OTRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OTRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTRequestFindFirstOrThrowArgs} args - Arguments to find a OTRequest
     * @example
     * // Get one OTRequest
     * const oTRequest = await prisma.oTRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OTRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, OTRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__OTRequestClient<$Result.GetResult<Prisma.$OTRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OTRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OTRequests
     * const oTRequests = await prisma.oTRequest.findMany()
     * 
     * // Get first 10 OTRequests
     * const oTRequests = await prisma.oTRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const oTRequestWithIdOnly = await prisma.oTRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OTRequestFindManyArgs>(args?: SelectSubset<T, OTRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OTRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OTRequest.
     * @param {OTRequestCreateArgs} args - Arguments to create a OTRequest.
     * @example
     * // Create one OTRequest
     * const OTRequest = await prisma.oTRequest.create({
     *   data: {
     *     // ... data to create a OTRequest
     *   }
     * })
     * 
     */
    create<T extends OTRequestCreateArgs>(args: SelectSubset<T, OTRequestCreateArgs<ExtArgs>>): Prisma__OTRequestClient<$Result.GetResult<Prisma.$OTRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OTRequests.
     * @param {OTRequestCreateManyArgs} args - Arguments to create many OTRequests.
     * @example
     * // Create many OTRequests
     * const oTRequest = await prisma.oTRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OTRequestCreateManyArgs>(args?: SelectSubset<T, OTRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OTRequest.
     * @param {OTRequestDeleteArgs} args - Arguments to delete one OTRequest.
     * @example
     * // Delete one OTRequest
     * const OTRequest = await prisma.oTRequest.delete({
     *   where: {
     *     // ... filter to delete one OTRequest
     *   }
     * })
     * 
     */
    delete<T extends OTRequestDeleteArgs>(args: SelectSubset<T, OTRequestDeleteArgs<ExtArgs>>): Prisma__OTRequestClient<$Result.GetResult<Prisma.$OTRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OTRequest.
     * @param {OTRequestUpdateArgs} args - Arguments to update one OTRequest.
     * @example
     * // Update one OTRequest
     * const oTRequest = await prisma.oTRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OTRequestUpdateArgs>(args: SelectSubset<T, OTRequestUpdateArgs<ExtArgs>>): Prisma__OTRequestClient<$Result.GetResult<Prisma.$OTRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OTRequests.
     * @param {OTRequestDeleteManyArgs} args - Arguments to filter OTRequests to delete.
     * @example
     * // Delete a few OTRequests
     * const { count } = await prisma.oTRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OTRequestDeleteManyArgs>(args?: SelectSubset<T, OTRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OTRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OTRequests
     * const oTRequest = await prisma.oTRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OTRequestUpdateManyArgs>(args: SelectSubset<T, OTRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OTRequest.
     * @param {OTRequestUpsertArgs} args - Arguments to update or create a OTRequest.
     * @example
     * // Update or create a OTRequest
     * const oTRequest = await prisma.oTRequest.upsert({
     *   create: {
     *     // ... data to create a OTRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OTRequest we want to update
     *   }
     * })
     */
    upsert<T extends OTRequestUpsertArgs>(args: SelectSubset<T, OTRequestUpsertArgs<ExtArgs>>): Prisma__OTRequestClient<$Result.GetResult<Prisma.$OTRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OTRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTRequestCountArgs} args - Arguments to filter OTRequests to count.
     * @example
     * // Count the number of OTRequests
     * const count = await prisma.oTRequest.count({
     *   where: {
     *     // ... the filter for the OTRequests we want to count
     *   }
     * })
    **/
    count<T extends OTRequestCountArgs>(
      args?: Subset<T, OTRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OTRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OTRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OTRequestAggregateArgs>(args: Subset<T, OTRequestAggregateArgs>): Prisma.PrismaPromise<GetOTRequestAggregateType<T>>

    /**
     * Group by OTRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OTRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OTRequestGroupByArgs['orderBy'] }
        : { orderBy?: OTRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OTRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOTRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OTRequest model
   */
  readonly fields: OTRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OTRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OTRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OTRequest model
   */
  interface OTRequestFieldRefs {
    readonly id: FieldRef<"OTRequest", 'Int'>
    readonly userId: FieldRef<"OTRequest", 'Int'>
    readonly date: FieldRef<"OTRequest", 'DateTime'>
    readonly reason: FieldRef<"OTRequest", 'String'>
    readonly hours: FieldRef<"OTRequest", 'Float'>
    readonly approved: FieldRef<"OTRequest", 'Boolean'>
    readonly approverId: FieldRef<"OTRequest", 'Int'>
    readonly createdAt: FieldRef<"OTRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OTRequest findUnique
   */
  export type OTRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTRequest
     */
    select?: OTRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTRequest
     */
    omit?: OTRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OTRequestInclude<ExtArgs> | null
    /**
     * Filter, which OTRequest to fetch.
     */
    where: OTRequestWhereUniqueInput
  }

  /**
   * OTRequest findUniqueOrThrow
   */
  export type OTRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTRequest
     */
    select?: OTRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTRequest
     */
    omit?: OTRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OTRequestInclude<ExtArgs> | null
    /**
     * Filter, which OTRequest to fetch.
     */
    where: OTRequestWhereUniqueInput
  }

  /**
   * OTRequest findFirst
   */
  export type OTRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTRequest
     */
    select?: OTRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTRequest
     */
    omit?: OTRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OTRequestInclude<ExtArgs> | null
    /**
     * Filter, which OTRequest to fetch.
     */
    where?: OTRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OTRequests to fetch.
     */
    orderBy?: OTRequestOrderByWithRelationInput | OTRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OTRequests.
     */
    cursor?: OTRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OTRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OTRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OTRequests.
     */
    distinct?: OTRequestScalarFieldEnum | OTRequestScalarFieldEnum[]
  }

  /**
   * OTRequest findFirstOrThrow
   */
  export type OTRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTRequest
     */
    select?: OTRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTRequest
     */
    omit?: OTRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OTRequestInclude<ExtArgs> | null
    /**
     * Filter, which OTRequest to fetch.
     */
    where?: OTRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OTRequests to fetch.
     */
    orderBy?: OTRequestOrderByWithRelationInput | OTRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OTRequests.
     */
    cursor?: OTRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OTRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OTRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OTRequests.
     */
    distinct?: OTRequestScalarFieldEnum | OTRequestScalarFieldEnum[]
  }

  /**
   * OTRequest findMany
   */
  export type OTRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTRequest
     */
    select?: OTRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTRequest
     */
    omit?: OTRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OTRequestInclude<ExtArgs> | null
    /**
     * Filter, which OTRequests to fetch.
     */
    where?: OTRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OTRequests to fetch.
     */
    orderBy?: OTRequestOrderByWithRelationInput | OTRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OTRequests.
     */
    cursor?: OTRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OTRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OTRequests.
     */
    skip?: number
    distinct?: OTRequestScalarFieldEnum | OTRequestScalarFieldEnum[]
  }

  /**
   * OTRequest create
   */
  export type OTRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTRequest
     */
    select?: OTRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTRequest
     */
    omit?: OTRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OTRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a OTRequest.
     */
    data: XOR<OTRequestCreateInput, OTRequestUncheckedCreateInput>
  }

  /**
   * OTRequest createMany
   */
  export type OTRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OTRequests.
     */
    data: OTRequestCreateManyInput | OTRequestCreateManyInput[]
  }

  /**
   * OTRequest update
   */
  export type OTRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTRequest
     */
    select?: OTRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTRequest
     */
    omit?: OTRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OTRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a OTRequest.
     */
    data: XOR<OTRequestUpdateInput, OTRequestUncheckedUpdateInput>
    /**
     * Choose, which OTRequest to update.
     */
    where: OTRequestWhereUniqueInput
  }

  /**
   * OTRequest updateMany
   */
  export type OTRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OTRequests.
     */
    data: XOR<OTRequestUpdateManyMutationInput, OTRequestUncheckedUpdateManyInput>
    /**
     * Filter which OTRequests to update
     */
    where?: OTRequestWhereInput
    /**
     * Limit how many OTRequests to update.
     */
    limit?: number
  }

  /**
   * OTRequest upsert
   */
  export type OTRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTRequest
     */
    select?: OTRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTRequest
     */
    omit?: OTRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OTRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the OTRequest to update in case it exists.
     */
    where: OTRequestWhereUniqueInput
    /**
     * In case the OTRequest found by the `where` argument doesn't exist, create a new OTRequest with this data.
     */
    create: XOR<OTRequestCreateInput, OTRequestUncheckedCreateInput>
    /**
     * In case the OTRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OTRequestUpdateInput, OTRequestUncheckedUpdateInput>
  }

  /**
   * OTRequest delete
   */
  export type OTRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTRequest
     */
    select?: OTRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTRequest
     */
    omit?: OTRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OTRequestInclude<ExtArgs> | null
    /**
     * Filter which OTRequest to delete.
     */
    where: OTRequestWhereUniqueInput
  }

  /**
   * OTRequest deleteMany
   */
  export type OTRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OTRequests to delete
     */
    where?: OTRequestWhereInput
    /**
     * Limit how many OTRequests to delete.
     */
    limit?: number
  }

  /**
   * OTRequest without action
   */
  export type OTRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTRequest
     */
    select?: OTRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OTRequest
     */
    omit?: OTRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OTRequestInclude<ExtArgs> | null
  }


  /**
   * Model Reminder
   */

  export type AggregateReminder = {
    _count: ReminderCountAggregateOutputType | null
    _avg: ReminderAvgAggregateOutputType | null
    _sum: ReminderSumAggregateOutputType | null
    _min: ReminderMinAggregateOutputType | null
    _max: ReminderMaxAggregateOutputType | null
  }

  export type ReminderAvgAggregateOutputType = {
    id: number | null
    notifyBeforeDays: number | null
  }

  export type ReminderSumAggregateOutputType = {
    id: number | null
    notifyBeforeDays: number | null
  }

  export type ReminderMinAggregateOutputType = {
    id: number | null
    title: string | null
    details: string | null
    dueDate: Date | null
    repeat: string | null
    isDone: boolean | null
    target: string | null
    type: string | null
    notifyBeforeDays: number | null
    notifiedMorning: boolean | null
    notifiedAfternoon: boolean | null
    notifiedEvening: boolean | null
    createdAt: Date | null
  }

  export type ReminderMaxAggregateOutputType = {
    id: number | null
    title: string | null
    details: string | null
    dueDate: Date | null
    repeat: string | null
    isDone: boolean | null
    target: string | null
    type: string | null
    notifyBeforeDays: number | null
    notifiedMorning: boolean | null
    notifiedAfternoon: boolean | null
    notifiedEvening: boolean | null
    createdAt: Date | null
  }

  export type ReminderCountAggregateOutputType = {
    id: number
    title: number
    details: number
    dueDate: number
    repeat: number
    isDone: number
    target: number
    type: number
    notifyBeforeDays: number
    notifiedMorning: number
    notifiedAfternoon: number
    notifiedEvening: number
    createdAt: number
    _all: number
  }


  export type ReminderAvgAggregateInputType = {
    id?: true
    notifyBeforeDays?: true
  }

  export type ReminderSumAggregateInputType = {
    id?: true
    notifyBeforeDays?: true
  }

  export type ReminderMinAggregateInputType = {
    id?: true
    title?: true
    details?: true
    dueDate?: true
    repeat?: true
    isDone?: true
    target?: true
    type?: true
    notifyBeforeDays?: true
    notifiedMorning?: true
    notifiedAfternoon?: true
    notifiedEvening?: true
    createdAt?: true
  }

  export type ReminderMaxAggregateInputType = {
    id?: true
    title?: true
    details?: true
    dueDate?: true
    repeat?: true
    isDone?: true
    target?: true
    type?: true
    notifyBeforeDays?: true
    notifiedMorning?: true
    notifiedAfternoon?: true
    notifiedEvening?: true
    createdAt?: true
  }

  export type ReminderCountAggregateInputType = {
    id?: true
    title?: true
    details?: true
    dueDate?: true
    repeat?: true
    isDone?: true
    target?: true
    type?: true
    notifyBeforeDays?: true
    notifiedMorning?: true
    notifiedAfternoon?: true
    notifiedEvening?: true
    createdAt?: true
    _all?: true
  }

  export type ReminderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reminder to aggregate.
     */
    where?: ReminderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reminders to fetch.
     */
    orderBy?: ReminderOrderByWithRelationInput | ReminderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReminderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reminders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reminders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reminders
    **/
    _count?: true | ReminderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReminderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReminderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReminderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReminderMaxAggregateInputType
  }

  export type GetReminderAggregateType<T extends ReminderAggregateArgs> = {
        [P in keyof T & keyof AggregateReminder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReminder[P]>
      : GetScalarType<T[P], AggregateReminder[P]>
  }




  export type ReminderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReminderWhereInput
    orderBy?: ReminderOrderByWithAggregationInput | ReminderOrderByWithAggregationInput[]
    by: ReminderScalarFieldEnum[] | ReminderScalarFieldEnum
    having?: ReminderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReminderCountAggregateInputType | true
    _avg?: ReminderAvgAggregateInputType
    _sum?: ReminderSumAggregateInputType
    _min?: ReminderMinAggregateInputType
    _max?: ReminderMaxAggregateInputType
  }

  export type ReminderGroupByOutputType = {
    id: number
    title: string
    details: string | null
    dueDate: Date
    repeat: string | null
    isDone: boolean | null
    target: string | null
    type: string | null
    notifyBeforeDays: number | null
    notifiedMorning: boolean | null
    notifiedAfternoon: boolean | null
    notifiedEvening: boolean | null
    createdAt: Date | null
    _count: ReminderCountAggregateOutputType | null
    _avg: ReminderAvgAggregateOutputType | null
    _sum: ReminderSumAggregateOutputType | null
    _min: ReminderMinAggregateOutputType | null
    _max: ReminderMaxAggregateOutputType | null
  }

  type GetReminderGroupByPayload<T extends ReminderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReminderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReminderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReminderGroupByOutputType[P]>
            : GetScalarType<T[P], ReminderGroupByOutputType[P]>
        }
      >
    >


  export type ReminderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    details?: boolean
    dueDate?: boolean
    repeat?: boolean
    isDone?: boolean
    target?: boolean
    type?: boolean
    notifyBeforeDays?: boolean
    notifiedMorning?: boolean
    notifiedAfternoon?: boolean
    notifiedEvening?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["reminder"]>



  export type ReminderSelectScalar = {
    id?: boolean
    title?: boolean
    details?: boolean
    dueDate?: boolean
    repeat?: boolean
    isDone?: boolean
    target?: boolean
    type?: boolean
    notifyBeforeDays?: boolean
    notifiedMorning?: boolean
    notifiedAfternoon?: boolean
    notifiedEvening?: boolean
    createdAt?: boolean
  }

  export type ReminderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "details" | "dueDate" | "repeat" | "isDone" | "target" | "type" | "notifyBeforeDays" | "notifiedMorning" | "notifiedAfternoon" | "notifiedEvening" | "createdAt", ExtArgs["result"]["reminder"]>

  export type $ReminderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Reminder"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      details: string | null
      dueDate: Date
      repeat: string | null
      isDone: boolean | null
      target: string | null
      type: string | null
      notifyBeforeDays: number | null
      notifiedMorning: boolean | null
      notifiedAfternoon: boolean | null
      notifiedEvening: boolean | null
      createdAt: Date | null
    }, ExtArgs["result"]["reminder"]>
    composites: {}
  }

  type ReminderGetPayload<S extends boolean | null | undefined | ReminderDefaultArgs> = $Result.GetResult<Prisma.$ReminderPayload, S>

  type ReminderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReminderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReminderCountAggregateInputType | true
    }

  export interface ReminderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reminder'], meta: { name: 'Reminder' } }
    /**
     * Find zero or one Reminder that matches the filter.
     * @param {ReminderFindUniqueArgs} args - Arguments to find a Reminder
     * @example
     * // Get one Reminder
     * const reminder = await prisma.reminder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReminderFindUniqueArgs>(args: SelectSubset<T, ReminderFindUniqueArgs<ExtArgs>>): Prisma__ReminderClient<$Result.GetResult<Prisma.$ReminderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Reminder that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReminderFindUniqueOrThrowArgs} args - Arguments to find a Reminder
     * @example
     * // Get one Reminder
     * const reminder = await prisma.reminder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReminderFindUniqueOrThrowArgs>(args: SelectSubset<T, ReminderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReminderClient<$Result.GetResult<Prisma.$ReminderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Reminder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReminderFindFirstArgs} args - Arguments to find a Reminder
     * @example
     * // Get one Reminder
     * const reminder = await prisma.reminder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReminderFindFirstArgs>(args?: SelectSubset<T, ReminderFindFirstArgs<ExtArgs>>): Prisma__ReminderClient<$Result.GetResult<Prisma.$ReminderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Reminder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReminderFindFirstOrThrowArgs} args - Arguments to find a Reminder
     * @example
     * // Get one Reminder
     * const reminder = await prisma.reminder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReminderFindFirstOrThrowArgs>(args?: SelectSubset<T, ReminderFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReminderClient<$Result.GetResult<Prisma.$ReminderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reminders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReminderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reminders
     * const reminders = await prisma.reminder.findMany()
     * 
     * // Get first 10 Reminders
     * const reminders = await prisma.reminder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reminderWithIdOnly = await prisma.reminder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReminderFindManyArgs>(args?: SelectSubset<T, ReminderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReminderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Reminder.
     * @param {ReminderCreateArgs} args - Arguments to create a Reminder.
     * @example
     * // Create one Reminder
     * const Reminder = await prisma.reminder.create({
     *   data: {
     *     // ... data to create a Reminder
     *   }
     * })
     * 
     */
    create<T extends ReminderCreateArgs>(args: SelectSubset<T, ReminderCreateArgs<ExtArgs>>): Prisma__ReminderClient<$Result.GetResult<Prisma.$ReminderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reminders.
     * @param {ReminderCreateManyArgs} args - Arguments to create many Reminders.
     * @example
     * // Create many Reminders
     * const reminder = await prisma.reminder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReminderCreateManyArgs>(args?: SelectSubset<T, ReminderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reminder.
     * @param {ReminderDeleteArgs} args - Arguments to delete one Reminder.
     * @example
     * // Delete one Reminder
     * const Reminder = await prisma.reminder.delete({
     *   where: {
     *     // ... filter to delete one Reminder
     *   }
     * })
     * 
     */
    delete<T extends ReminderDeleteArgs>(args: SelectSubset<T, ReminderDeleteArgs<ExtArgs>>): Prisma__ReminderClient<$Result.GetResult<Prisma.$ReminderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Reminder.
     * @param {ReminderUpdateArgs} args - Arguments to update one Reminder.
     * @example
     * // Update one Reminder
     * const reminder = await prisma.reminder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReminderUpdateArgs>(args: SelectSubset<T, ReminderUpdateArgs<ExtArgs>>): Prisma__ReminderClient<$Result.GetResult<Prisma.$ReminderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reminders.
     * @param {ReminderDeleteManyArgs} args - Arguments to filter Reminders to delete.
     * @example
     * // Delete a few Reminders
     * const { count } = await prisma.reminder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReminderDeleteManyArgs>(args?: SelectSubset<T, ReminderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reminders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReminderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reminders
     * const reminder = await prisma.reminder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReminderUpdateManyArgs>(args: SelectSubset<T, ReminderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reminder.
     * @param {ReminderUpsertArgs} args - Arguments to update or create a Reminder.
     * @example
     * // Update or create a Reminder
     * const reminder = await prisma.reminder.upsert({
     *   create: {
     *     // ... data to create a Reminder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reminder we want to update
     *   }
     * })
     */
    upsert<T extends ReminderUpsertArgs>(args: SelectSubset<T, ReminderUpsertArgs<ExtArgs>>): Prisma__ReminderClient<$Result.GetResult<Prisma.$ReminderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reminders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReminderCountArgs} args - Arguments to filter Reminders to count.
     * @example
     * // Count the number of Reminders
     * const count = await prisma.reminder.count({
     *   where: {
     *     // ... the filter for the Reminders we want to count
     *   }
     * })
    **/
    count<T extends ReminderCountArgs>(
      args?: Subset<T, ReminderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReminderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reminder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReminderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReminderAggregateArgs>(args: Subset<T, ReminderAggregateArgs>): Prisma.PrismaPromise<GetReminderAggregateType<T>>

    /**
     * Group by Reminder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReminderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReminderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReminderGroupByArgs['orderBy'] }
        : { orderBy?: ReminderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReminderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReminderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reminder model
   */
  readonly fields: ReminderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reminder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReminderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Reminder model
   */
  interface ReminderFieldRefs {
    readonly id: FieldRef<"Reminder", 'Int'>
    readonly title: FieldRef<"Reminder", 'String'>
    readonly details: FieldRef<"Reminder", 'String'>
    readonly dueDate: FieldRef<"Reminder", 'DateTime'>
    readonly repeat: FieldRef<"Reminder", 'String'>
    readonly isDone: FieldRef<"Reminder", 'Boolean'>
    readonly target: FieldRef<"Reminder", 'String'>
    readonly type: FieldRef<"Reminder", 'String'>
    readonly notifyBeforeDays: FieldRef<"Reminder", 'Int'>
    readonly notifiedMorning: FieldRef<"Reminder", 'Boolean'>
    readonly notifiedAfternoon: FieldRef<"Reminder", 'Boolean'>
    readonly notifiedEvening: FieldRef<"Reminder", 'Boolean'>
    readonly createdAt: FieldRef<"Reminder", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Reminder findUnique
   */
  export type ReminderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reminder
     */
    select?: ReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reminder
     */
    omit?: ReminderOmit<ExtArgs> | null
    /**
     * Filter, which Reminder to fetch.
     */
    where: ReminderWhereUniqueInput
  }

  /**
   * Reminder findUniqueOrThrow
   */
  export type ReminderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reminder
     */
    select?: ReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reminder
     */
    omit?: ReminderOmit<ExtArgs> | null
    /**
     * Filter, which Reminder to fetch.
     */
    where: ReminderWhereUniqueInput
  }

  /**
   * Reminder findFirst
   */
  export type ReminderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reminder
     */
    select?: ReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reminder
     */
    omit?: ReminderOmit<ExtArgs> | null
    /**
     * Filter, which Reminder to fetch.
     */
    where?: ReminderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reminders to fetch.
     */
    orderBy?: ReminderOrderByWithRelationInput | ReminderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reminders.
     */
    cursor?: ReminderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reminders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reminders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reminders.
     */
    distinct?: ReminderScalarFieldEnum | ReminderScalarFieldEnum[]
  }

  /**
   * Reminder findFirstOrThrow
   */
  export type ReminderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reminder
     */
    select?: ReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reminder
     */
    omit?: ReminderOmit<ExtArgs> | null
    /**
     * Filter, which Reminder to fetch.
     */
    where?: ReminderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reminders to fetch.
     */
    orderBy?: ReminderOrderByWithRelationInput | ReminderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reminders.
     */
    cursor?: ReminderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reminders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reminders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reminders.
     */
    distinct?: ReminderScalarFieldEnum | ReminderScalarFieldEnum[]
  }

  /**
   * Reminder findMany
   */
  export type ReminderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reminder
     */
    select?: ReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reminder
     */
    omit?: ReminderOmit<ExtArgs> | null
    /**
     * Filter, which Reminders to fetch.
     */
    where?: ReminderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reminders to fetch.
     */
    orderBy?: ReminderOrderByWithRelationInput | ReminderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reminders.
     */
    cursor?: ReminderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reminders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reminders.
     */
    skip?: number
    distinct?: ReminderScalarFieldEnum | ReminderScalarFieldEnum[]
  }

  /**
   * Reminder create
   */
  export type ReminderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reminder
     */
    select?: ReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reminder
     */
    omit?: ReminderOmit<ExtArgs> | null
    /**
     * The data needed to create a Reminder.
     */
    data: XOR<ReminderCreateInput, ReminderUncheckedCreateInput>
  }

  /**
   * Reminder createMany
   */
  export type ReminderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reminders.
     */
    data: ReminderCreateManyInput | ReminderCreateManyInput[]
  }

  /**
   * Reminder update
   */
  export type ReminderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reminder
     */
    select?: ReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reminder
     */
    omit?: ReminderOmit<ExtArgs> | null
    /**
     * The data needed to update a Reminder.
     */
    data: XOR<ReminderUpdateInput, ReminderUncheckedUpdateInput>
    /**
     * Choose, which Reminder to update.
     */
    where: ReminderWhereUniqueInput
  }

  /**
   * Reminder updateMany
   */
  export type ReminderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reminders.
     */
    data: XOR<ReminderUpdateManyMutationInput, ReminderUncheckedUpdateManyInput>
    /**
     * Filter which Reminders to update
     */
    where?: ReminderWhereInput
    /**
     * Limit how many Reminders to update.
     */
    limit?: number
  }

  /**
   * Reminder upsert
   */
  export type ReminderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reminder
     */
    select?: ReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reminder
     */
    omit?: ReminderOmit<ExtArgs> | null
    /**
     * The filter to search for the Reminder to update in case it exists.
     */
    where: ReminderWhereUniqueInput
    /**
     * In case the Reminder found by the `where` argument doesn't exist, create a new Reminder with this data.
     */
    create: XOR<ReminderCreateInput, ReminderUncheckedCreateInput>
    /**
     * In case the Reminder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReminderUpdateInput, ReminderUncheckedUpdateInput>
  }

  /**
   * Reminder delete
   */
  export type ReminderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reminder
     */
    select?: ReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reminder
     */
    omit?: ReminderOmit<ExtArgs> | null
    /**
     * Filter which Reminder to delete.
     */
    where: ReminderWhereUniqueInput
  }

  /**
   * Reminder deleteMany
   */
  export type ReminderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reminders to delete
     */
    where?: ReminderWhereInput
    /**
     * Limit how many Reminders to delete.
     */
    limit?: number
  }

  /**
   * Reminder without action
   */
  export type ReminderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reminder
     */
    select?: ReminderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reminder
     */
    omit?: ReminderOmit<ExtArgs> | null
  }


  /**
   * Model PasswordStore
   */

  export type AggregatePasswordStore = {
    _count: PasswordStoreCountAggregateOutputType | null
    _avg: PasswordStoreAvgAggregateOutputType | null
    _sum: PasswordStoreSumAggregateOutputType | null
    _min: PasswordStoreMinAggregateOutputType | null
    _max: PasswordStoreMaxAggregateOutputType | null
  }

  export type PasswordStoreAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type PasswordStoreSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type PasswordStoreMinAggregateOutputType = {
    id: number | null
    userId: number | null
    label: string | null
    username: string | null
    password: string | null
    notes: string | null
    createdAt: Date | null
  }

  export type PasswordStoreMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    label: string | null
    username: string | null
    password: string | null
    notes: string | null
    createdAt: Date | null
  }

  export type PasswordStoreCountAggregateOutputType = {
    id: number
    userId: number
    label: number
    username: number
    password: number
    notes: number
    createdAt: number
    _all: number
  }


  export type PasswordStoreAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type PasswordStoreSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type PasswordStoreMinAggregateInputType = {
    id?: true
    userId?: true
    label?: true
    username?: true
    password?: true
    notes?: true
    createdAt?: true
  }

  export type PasswordStoreMaxAggregateInputType = {
    id?: true
    userId?: true
    label?: true
    username?: true
    password?: true
    notes?: true
    createdAt?: true
  }

  export type PasswordStoreCountAggregateInputType = {
    id?: true
    userId?: true
    label?: true
    username?: true
    password?: true
    notes?: true
    createdAt?: true
    _all?: true
  }

  export type PasswordStoreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordStore to aggregate.
     */
    where?: PasswordStoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordStores to fetch.
     */
    orderBy?: PasswordStoreOrderByWithRelationInput | PasswordStoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PasswordStoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordStores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordStores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PasswordStores
    **/
    _count?: true | PasswordStoreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PasswordStoreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PasswordStoreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PasswordStoreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PasswordStoreMaxAggregateInputType
  }

  export type GetPasswordStoreAggregateType<T extends PasswordStoreAggregateArgs> = {
        [P in keyof T & keyof AggregatePasswordStore]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePasswordStore[P]>
      : GetScalarType<T[P], AggregatePasswordStore[P]>
  }




  export type PasswordStoreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordStoreWhereInput
    orderBy?: PasswordStoreOrderByWithAggregationInput | PasswordStoreOrderByWithAggregationInput[]
    by: PasswordStoreScalarFieldEnum[] | PasswordStoreScalarFieldEnum
    having?: PasswordStoreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PasswordStoreCountAggregateInputType | true
    _avg?: PasswordStoreAvgAggregateInputType
    _sum?: PasswordStoreSumAggregateInputType
    _min?: PasswordStoreMinAggregateInputType
    _max?: PasswordStoreMaxAggregateInputType
  }

  export type PasswordStoreGroupByOutputType = {
    id: number
    userId: number
    label: string
    username: string
    password: string
    notes: string | null
    createdAt: Date | null
    _count: PasswordStoreCountAggregateOutputType | null
    _avg: PasswordStoreAvgAggregateOutputType | null
    _sum: PasswordStoreSumAggregateOutputType | null
    _min: PasswordStoreMinAggregateOutputType | null
    _max: PasswordStoreMaxAggregateOutputType | null
  }

  type GetPasswordStoreGroupByPayload<T extends PasswordStoreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PasswordStoreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PasswordStoreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PasswordStoreGroupByOutputType[P]>
            : GetScalarType<T[P], PasswordStoreGroupByOutputType[P]>
        }
      >
    >


  export type PasswordStoreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    label?: boolean
    username?: boolean
    password?: boolean
    notes?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passwordStore"]>



  export type PasswordStoreSelectScalar = {
    id?: boolean
    userId?: boolean
    label?: boolean
    username?: boolean
    password?: boolean
    notes?: boolean
    createdAt?: boolean
  }

  export type PasswordStoreOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "label" | "username" | "password" | "notes" | "createdAt", ExtArgs["result"]["passwordStore"]>
  export type PasswordStoreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PasswordStorePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PasswordStore"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      label: string
      username: string
      password: string
      notes: string | null
      createdAt: Date | null
    }, ExtArgs["result"]["passwordStore"]>
    composites: {}
  }

  type PasswordStoreGetPayload<S extends boolean | null | undefined | PasswordStoreDefaultArgs> = $Result.GetResult<Prisma.$PasswordStorePayload, S>

  type PasswordStoreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PasswordStoreFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PasswordStoreCountAggregateInputType | true
    }

  export interface PasswordStoreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PasswordStore'], meta: { name: 'PasswordStore' } }
    /**
     * Find zero or one PasswordStore that matches the filter.
     * @param {PasswordStoreFindUniqueArgs} args - Arguments to find a PasswordStore
     * @example
     * // Get one PasswordStore
     * const passwordStore = await prisma.passwordStore.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PasswordStoreFindUniqueArgs>(args: SelectSubset<T, PasswordStoreFindUniqueArgs<ExtArgs>>): Prisma__PasswordStoreClient<$Result.GetResult<Prisma.$PasswordStorePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PasswordStore that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PasswordStoreFindUniqueOrThrowArgs} args - Arguments to find a PasswordStore
     * @example
     * // Get one PasswordStore
     * const passwordStore = await prisma.passwordStore.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PasswordStoreFindUniqueOrThrowArgs>(args: SelectSubset<T, PasswordStoreFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PasswordStoreClient<$Result.GetResult<Prisma.$PasswordStorePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PasswordStore that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordStoreFindFirstArgs} args - Arguments to find a PasswordStore
     * @example
     * // Get one PasswordStore
     * const passwordStore = await prisma.passwordStore.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PasswordStoreFindFirstArgs>(args?: SelectSubset<T, PasswordStoreFindFirstArgs<ExtArgs>>): Prisma__PasswordStoreClient<$Result.GetResult<Prisma.$PasswordStorePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PasswordStore that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordStoreFindFirstOrThrowArgs} args - Arguments to find a PasswordStore
     * @example
     * // Get one PasswordStore
     * const passwordStore = await prisma.passwordStore.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PasswordStoreFindFirstOrThrowArgs>(args?: SelectSubset<T, PasswordStoreFindFirstOrThrowArgs<ExtArgs>>): Prisma__PasswordStoreClient<$Result.GetResult<Prisma.$PasswordStorePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PasswordStores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordStoreFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PasswordStores
     * const passwordStores = await prisma.passwordStore.findMany()
     * 
     * // Get first 10 PasswordStores
     * const passwordStores = await prisma.passwordStore.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passwordStoreWithIdOnly = await prisma.passwordStore.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PasswordStoreFindManyArgs>(args?: SelectSubset<T, PasswordStoreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordStorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PasswordStore.
     * @param {PasswordStoreCreateArgs} args - Arguments to create a PasswordStore.
     * @example
     * // Create one PasswordStore
     * const PasswordStore = await prisma.passwordStore.create({
     *   data: {
     *     // ... data to create a PasswordStore
     *   }
     * })
     * 
     */
    create<T extends PasswordStoreCreateArgs>(args: SelectSubset<T, PasswordStoreCreateArgs<ExtArgs>>): Prisma__PasswordStoreClient<$Result.GetResult<Prisma.$PasswordStorePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PasswordStores.
     * @param {PasswordStoreCreateManyArgs} args - Arguments to create many PasswordStores.
     * @example
     * // Create many PasswordStores
     * const passwordStore = await prisma.passwordStore.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PasswordStoreCreateManyArgs>(args?: SelectSubset<T, PasswordStoreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PasswordStore.
     * @param {PasswordStoreDeleteArgs} args - Arguments to delete one PasswordStore.
     * @example
     * // Delete one PasswordStore
     * const PasswordStore = await prisma.passwordStore.delete({
     *   where: {
     *     // ... filter to delete one PasswordStore
     *   }
     * })
     * 
     */
    delete<T extends PasswordStoreDeleteArgs>(args: SelectSubset<T, PasswordStoreDeleteArgs<ExtArgs>>): Prisma__PasswordStoreClient<$Result.GetResult<Prisma.$PasswordStorePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PasswordStore.
     * @param {PasswordStoreUpdateArgs} args - Arguments to update one PasswordStore.
     * @example
     * // Update one PasswordStore
     * const passwordStore = await prisma.passwordStore.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PasswordStoreUpdateArgs>(args: SelectSubset<T, PasswordStoreUpdateArgs<ExtArgs>>): Prisma__PasswordStoreClient<$Result.GetResult<Prisma.$PasswordStorePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PasswordStores.
     * @param {PasswordStoreDeleteManyArgs} args - Arguments to filter PasswordStores to delete.
     * @example
     * // Delete a few PasswordStores
     * const { count } = await prisma.passwordStore.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PasswordStoreDeleteManyArgs>(args?: SelectSubset<T, PasswordStoreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordStores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordStoreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PasswordStores
     * const passwordStore = await prisma.passwordStore.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PasswordStoreUpdateManyArgs>(args: SelectSubset<T, PasswordStoreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PasswordStore.
     * @param {PasswordStoreUpsertArgs} args - Arguments to update or create a PasswordStore.
     * @example
     * // Update or create a PasswordStore
     * const passwordStore = await prisma.passwordStore.upsert({
     *   create: {
     *     // ... data to create a PasswordStore
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PasswordStore we want to update
     *   }
     * })
     */
    upsert<T extends PasswordStoreUpsertArgs>(args: SelectSubset<T, PasswordStoreUpsertArgs<ExtArgs>>): Prisma__PasswordStoreClient<$Result.GetResult<Prisma.$PasswordStorePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PasswordStores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordStoreCountArgs} args - Arguments to filter PasswordStores to count.
     * @example
     * // Count the number of PasswordStores
     * const count = await prisma.passwordStore.count({
     *   where: {
     *     // ... the filter for the PasswordStores we want to count
     *   }
     * })
    **/
    count<T extends PasswordStoreCountArgs>(
      args?: Subset<T, PasswordStoreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PasswordStoreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PasswordStore.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordStoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PasswordStoreAggregateArgs>(args: Subset<T, PasswordStoreAggregateArgs>): Prisma.PrismaPromise<GetPasswordStoreAggregateType<T>>

    /**
     * Group by PasswordStore.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordStoreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PasswordStoreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PasswordStoreGroupByArgs['orderBy'] }
        : { orderBy?: PasswordStoreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PasswordStoreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPasswordStoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PasswordStore model
   */
  readonly fields: PasswordStoreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PasswordStore.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PasswordStoreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PasswordStore model
   */
  interface PasswordStoreFieldRefs {
    readonly id: FieldRef<"PasswordStore", 'Int'>
    readonly userId: FieldRef<"PasswordStore", 'Int'>
    readonly label: FieldRef<"PasswordStore", 'String'>
    readonly username: FieldRef<"PasswordStore", 'String'>
    readonly password: FieldRef<"PasswordStore", 'String'>
    readonly notes: FieldRef<"PasswordStore", 'String'>
    readonly createdAt: FieldRef<"PasswordStore", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PasswordStore findUnique
   */
  export type PasswordStoreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordStore
     */
    select?: PasswordStoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordStore
     */
    omit?: PasswordStoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordStoreInclude<ExtArgs> | null
    /**
     * Filter, which PasswordStore to fetch.
     */
    where: PasswordStoreWhereUniqueInput
  }

  /**
   * PasswordStore findUniqueOrThrow
   */
  export type PasswordStoreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordStore
     */
    select?: PasswordStoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordStore
     */
    omit?: PasswordStoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordStoreInclude<ExtArgs> | null
    /**
     * Filter, which PasswordStore to fetch.
     */
    where: PasswordStoreWhereUniqueInput
  }

  /**
   * PasswordStore findFirst
   */
  export type PasswordStoreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordStore
     */
    select?: PasswordStoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordStore
     */
    omit?: PasswordStoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordStoreInclude<ExtArgs> | null
    /**
     * Filter, which PasswordStore to fetch.
     */
    where?: PasswordStoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordStores to fetch.
     */
    orderBy?: PasswordStoreOrderByWithRelationInput | PasswordStoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordStores.
     */
    cursor?: PasswordStoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordStores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordStores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordStores.
     */
    distinct?: PasswordStoreScalarFieldEnum | PasswordStoreScalarFieldEnum[]
  }

  /**
   * PasswordStore findFirstOrThrow
   */
  export type PasswordStoreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordStore
     */
    select?: PasswordStoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordStore
     */
    omit?: PasswordStoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordStoreInclude<ExtArgs> | null
    /**
     * Filter, which PasswordStore to fetch.
     */
    where?: PasswordStoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordStores to fetch.
     */
    orderBy?: PasswordStoreOrderByWithRelationInput | PasswordStoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordStores.
     */
    cursor?: PasswordStoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordStores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordStores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordStores.
     */
    distinct?: PasswordStoreScalarFieldEnum | PasswordStoreScalarFieldEnum[]
  }

  /**
   * PasswordStore findMany
   */
  export type PasswordStoreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordStore
     */
    select?: PasswordStoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordStore
     */
    omit?: PasswordStoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordStoreInclude<ExtArgs> | null
    /**
     * Filter, which PasswordStores to fetch.
     */
    where?: PasswordStoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordStores to fetch.
     */
    orderBy?: PasswordStoreOrderByWithRelationInput | PasswordStoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PasswordStores.
     */
    cursor?: PasswordStoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordStores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordStores.
     */
    skip?: number
    distinct?: PasswordStoreScalarFieldEnum | PasswordStoreScalarFieldEnum[]
  }

  /**
   * PasswordStore create
   */
  export type PasswordStoreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordStore
     */
    select?: PasswordStoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordStore
     */
    omit?: PasswordStoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordStoreInclude<ExtArgs> | null
    /**
     * The data needed to create a PasswordStore.
     */
    data: XOR<PasswordStoreCreateInput, PasswordStoreUncheckedCreateInput>
  }

  /**
   * PasswordStore createMany
   */
  export type PasswordStoreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PasswordStores.
     */
    data: PasswordStoreCreateManyInput | PasswordStoreCreateManyInput[]
  }

  /**
   * PasswordStore update
   */
  export type PasswordStoreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordStore
     */
    select?: PasswordStoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordStore
     */
    omit?: PasswordStoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordStoreInclude<ExtArgs> | null
    /**
     * The data needed to update a PasswordStore.
     */
    data: XOR<PasswordStoreUpdateInput, PasswordStoreUncheckedUpdateInput>
    /**
     * Choose, which PasswordStore to update.
     */
    where: PasswordStoreWhereUniqueInput
  }

  /**
   * PasswordStore updateMany
   */
  export type PasswordStoreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PasswordStores.
     */
    data: XOR<PasswordStoreUpdateManyMutationInput, PasswordStoreUncheckedUpdateManyInput>
    /**
     * Filter which PasswordStores to update
     */
    where?: PasswordStoreWhereInput
    /**
     * Limit how many PasswordStores to update.
     */
    limit?: number
  }

  /**
   * PasswordStore upsert
   */
  export type PasswordStoreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordStore
     */
    select?: PasswordStoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordStore
     */
    omit?: PasswordStoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordStoreInclude<ExtArgs> | null
    /**
     * The filter to search for the PasswordStore to update in case it exists.
     */
    where: PasswordStoreWhereUniqueInput
    /**
     * In case the PasswordStore found by the `where` argument doesn't exist, create a new PasswordStore with this data.
     */
    create: XOR<PasswordStoreCreateInput, PasswordStoreUncheckedCreateInput>
    /**
     * In case the PasswordStore was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PasswordStoreUpdateInput, PasswordStoreUncheckedUpdateInput>
  }

  /**
   * PasswordStore delete
   */
  export type PasswordStoreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordStore
     */
    select?: PasswordStoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordStore
     */
    omit?: PasswordStoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordStoreInclude<ExtArgs> | null
    /**
     * Filter which PasswordStore to delete.
     */
    where: PasswordStoreWhereUniqueInput
  }

  /**
   * PasswordStore deleteMany
   */
  export type PasswordStoreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordStores to delete
     */
    where?: PasswordStoreWhereInput
    /**
     * Limit how many PasswordStores to delete.
     */
    limit?: number
  }

  /**
   * PasswordStore without action
   */
  export type PasswordStoreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordStore
     */
    select?: PasswordStoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordStore
     */
    omit?: PasswordStoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordStoreInclude<ExtArgs> | null
  }


  /**
   * Model AdminLog
   */

  export type AggregateAdminLog = {
    _count: AdminLogCountAggregateOutputType | null
    _avg: AdminLogAvgAggregateOutputType | null
    _sum: AdminLogSumAggregateOutputType | null
    _min: AdminLogMinAggregateOutputType | null
    _max: AdminLogMaxAggregateOutputType | null
  }

  export type AdminLogAvgAggregateOutputType = {
    id: number | null
    adminId: number | null
  }

  export type AdminLogSumAggregateOutputType = {
    id: number | null
    adminId: number | null
  }

  export type AdminLogMinAggregateOutputType = {
    id: number | null
    adminId: number | null
    action: string | null
    timestamp: Date | null
    details: string | null
  }

  export type AdminLogMaxAggregateOutputType = {
    id: number | null
    adminId: number | null
    action: string | null
    timestamp: Date | null
    details: string | null
  }

  export type AdminLogCountAggregateOutputType = {
    id: number
    adminId: number
    action: number
    timestamp: number
    details: number
    _all: number
  }


  export type AdminLogAvgAggregateInputType = {
    id?: true
    adminId?: true
  }

  export type AdminLogSumAggregateInputType = {
    id?: true
    adminId?: true
  }

  export type AdminLogMinAggregateInputType = {
    id?: true
    adminId?: true
    action?: true
    timestamp?: true
    details?: true
  }

  export type AdminLogMaxAggregateInputType = {
    id?: true
    adminId?: true
    action?: true
    timestamp?: true
    details?: true
  }

  export type AdminLogCountAggregateInputType = {
    id?: true
    adminId?: true
    action?: true
    timestamp?: true
    details?: true
    _all?: true
  }

  export type AdminLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminLog to aggregate.
     */
    where?: AdminLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminLogs to fetch.
     */
    orderBy?: AdminLogOrderByWithRelationInput | AdminLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdminLogs
    **/
    _count?: true | AdminLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminLogMaxAggregateInputType
  }

  export type GetAdminLogAggregateType<T extends AdminLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAdminLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdminLog[P]>
      : GetScalarType<T[P], AggregateAdminLog[P]>
  }




  export type AdminLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminLogWhereInput
    orderBy?: AdminLogOrderByWithAggregationInput | AdminLogOrderByWithAggregationInput[]
    by: AdminLogScalarFieldEnum[] | AdminLogScalarFieldEnum
    having?: AdminLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminLogCountAggregateInputType | true
    _avg?: AdminLogAvgAggregateInputType
    _sum?: AdminLogSumAggregateInputType
    _min?: AdminLogMinAggregateInputType
    _max?: AdminLogMaxAggregateInputType
  }

  export type AdminLogGroupByOutputType = {
    id: number
    adminId: number
    action: string
    timestamp: Date | null
    details: string | null
    _count: AdminLogCountAggregateOutputType | null
    _avg: AdminLogAvgAggregateOutputType | null
    _sum: AdminLogSumAggregateOutputType | null
    _min: AdminLogMinAggregateOutputType | null
    _max: AdminLogMaxAggregateOutputType | null
  }

  type GetAdminLogGroupByPayload<T extends AdminLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminLogGroupByOutputType[P]>
            : GetScalarType<T[P], AdminLogGroupByOutputType[P]>
        }
      >
    >


  export type AdminLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adminId?: boolean
    action?: boolean
    timestamp?: boolean
    details?: boolean
    admin?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminLog"]>



  export type AdminLogSelectScalar = {
    id?: boolean
    adminId?: boolean
    action?: boolean
    timestamp?: boolean
    details?: boolean
  }

  export type AdminLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "adminId" | "action" | "timestamp" | "details", ExtArgs["result"]["adminLog"]>
  export type AdminLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AdminLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AdminLog"
    objects: {
      admin: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      adminId: number
      action: string
      timestamp: Date | null
      details: string | null
    }, ExtArgs["result"]["adminLog"]>
    composites: {}
  }

  type AdminLogGetPayload<S extends boolean | null | undefined | AdminLogDefaultArgs> = $Result.GetResult<Prisma.$AdminLogPayload, S>

  type AdminLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminLogCountAggregateInputType | true
    }

  export interface AdminLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdminLog'], meta: { name: 'AdminLog' } }
    /**
     * Find zero or one AdminLog that matches the filter.
     * @param {AdminLogFindUniqueArgs} args - Arguments to find a AdminLog
     * @example
     * // Get one AdminLog
     * const adminLog = await prisma.adminLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminLogFindUniqueArgs>(args: SelectSubset<T, AdminLogFindUniqueArgs<ExtArgs>>): Prisma__AdminLogClient<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AdminLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminLogFindUniqueOrThrowArgs} args - Arguments to find a AdminLog
     * @example
     * // Get one AdminLog
     * const adminLog = await prisma.adminLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminLogClient<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminLogFindFirstArgs} args - Arguments to find a AdminLog
     * @example
     * // Get one AdminLog
     * const adminLog = await prisma.adminLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminLogFindFirstArgs>(args?: SelectSubset<T, AdminLogFindFirstArgs<ExtArgs>>): Prisma__AdminLogClient<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AdminLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminLogFindFirstOrThrowArgs} args - Arguments to find a AdminLog
     * @example
     * // Get one AdminLog
     * const adminLog = await prisma.adminLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminLogClient<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AdminLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdminLogs
     * const adminLogs = await prisma.adminLog.findMany()
     * 
     * // Get first 10 AdminLogs
     * const adminLogs = await prisma.adminLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminLogWithIdOnly = await prisma.adminLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminLogFindManyArgs>(args?: SelectSubset<T, AdminLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AdminLog.
     * @param {AdminLogCreateArgs} args - Arguments to create a AdminLog.
     * @example
     * // Create one AdminLog
     * const AdminLog = await prisma.adminLog.create({
     *   data: {
     *     // ... data to create a AdminLog
     *   }
     * })
     * 
     */
    create<T extends AdminLogCreateArgs>(args: SelectSubset<T, AdminLogCreateArgs<ExtArgs>>): Prisma__AdminLogClient<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AdminLogs.
     * @param {AdminLogCreateManyArgs} args - Arguments to create many AdminLogs.
     * @example
     * // Create many AdminLogs
     * const adminLog = await prisma.adminLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminLogCreateManyArgs>(args?: SelectSubset<T, AdminLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AdminLog.
     * @param {AdminLogDeleteArgs} args - Arguments to delete one AdminLog.
     * @example
     * // Delete one AdminLog
     * const AdminLog = await prisma.adminLog.delete({
     *   where: {
     *     // ... filter to delete one AdminLog
     *   }
     * })
     * 
     */
    delete<T extends AdminLogDeleteArgs>(args: SelectSubset<T, AdminLogDeleteArgs<ExtArgs>>): Prisma__AdminLogClient<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AdminLog.
     * @param {AdminLogUpdateArgs} args - Arguments to update one AdminLog.
     * @example
     * // Update one AdminLog
     * const adminLog = await prisma.adminLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminLogUpdateArgs>(args: SelectSubset<T, AdminLogUpdateArgs<ExtArgs>>): Prisma__AdminLogClient<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AdminLogs.
     * @param {AdminLogDeleteManyArgs} args - Arguments to filter AdminLogs to delete.
     * @example
     * // Delete a few AdminLogs
     * const { count } = await prisma.adminLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminLogDeleteManyArgs>(args?: SelectSubset<T, AdminLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdminLogs
     * const adminLog = await prisma.adminLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminLogUpdateManyArgs>(args: SelectSubset<T, AdminLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AdminLog.
     * @param {AdminLogUpsertArgs} args - Arguments to update or create a AdminLog.
     * @example
     * // Update or create a AdminLog
     * const adminLog = await prisma.adminLog.upsert({
     *   create: {
     *     // ... data to create a AdminLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdminLog we want to update
     *   }
     * })
     */
    upsert<T extends AdminLogUpsertArgs>(args: SelectSubset<T, AdminLogUpsertArgs<ExtArgs>>): Prisma__AdminLogClient<$Result.GetResult<Prisma.$AdminLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AdminLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminLogCountArgs} args - Arguments to filter AdminLogs to count.
     * @example
     * // Count the number of AdminLogs
     * const count = await prisma.adminLog.count({
     *   where: {
     *     // ... the filter for the AdminLogs we want to count
     *   }
     * })
    **/
    count<T extends AdminLogCountArgs>(
      args?: Subset<T, AdminLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdminLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminLogAggregateArgs>(args: Subset<T, AdminLogAggregateArgs>): Prisma.PrismaPromise<GetAdminLogAggregateType<T>>

    /**
     * Group by AdminLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminLogGroupByArgs['orderBy'] }
        : { orderBy?: AdminLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AdminLog model
   */
  readonly fields: AdminLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AdminLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    admin<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AdminLog model
   */
  interface AdminLogFieldRefs {
    readonly id: FieldRef<"AdminLog", 'Int'>
    readonly adminId: FieldRef<"AdminLog", 'Int'>
    readonly action: FieldRef<"AdminLog", 'String'>
    readonly timestamp: FieldRef<"AdminLog", 'DateTime'>
    readonly details: FieldRef<"AdminLog", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AdminLog findUnique
   */
  export type AdminLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminLog
     */
    omit?: AdminLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminLogInclude<ExtArgs> | null
    /**
     * Filter, which AdminLog to fetch.
     */
    where: AdminLogWhereUniqueInput
  }

  /**
   * AdminLog findUniqueOrThrow
   */
  export type AdminLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminLog
     */
    omit?: AdminLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminLogInclude<ExtArgs> | null
    /**
     * Filter, which AdminLog to fetch.
     */
    where: AdminLogWhereUniqueInput
  }

  /**
   * AdminLog findFirst
   */
  export type AdminLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminLog
     */
    omit?: AdminLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminLogInclude<ExtArgs> | null
    /**
     * Filter, which AdminLog to fetch.
     */
    where?: AdminLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminLogs to fetch.
     */
    orderBy?: AdminLogOrderByWithRelationInput | AdminLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminLogs.
     */
    cursor?: AdminLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminLogs.
     */
    distinct?: AdminLogScalarFieldEnum | AdminLogScalarFieldEnum[]
  }

  /**
   * AdminLog findFirstOrThrow
   */
  export type AdminLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminLog
     */
    omit?: AdminLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminLogInclude<ExtArgs> | null
    /**
     * Filter, which AdminLog to fetch.
     */
    where?: AdminLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminLogs to fetch.
     */
    orderBy?: AdminLogOrderByWithRelationInput | AdminLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminLogs.
     */
    cursor?: AdminLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminLogs.
     */
    distinct?: AdminLogScalarFieldEnum | AdminLogScalarFieldEnum[]
  }

  /**
   * AdminLog findMany
   */
  export type AdminLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminLog
     */
    omit?: AdminLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminLogInclude<ExtArgs> | null
    /**
     * Filter, which AdminLogs to fetch.
     */
    where?: AdminLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminLogs to fetch.
     */
    orderBy?: AdminLogOrderByWithRelationInput | AdminLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdminLogs.
     */
    cursor?: AdminLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminLogs.
     */
    skip?: number
    distinct?: AdminLogScalarFieldEnum | AdminLogScalarFieldEnum[]
  }

  /**
   * AdminLog create
   */
  export type AdminLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminLog
     */
    omit?: AdminLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AdminLog.
     */
    data: XOR<AdminLogCreateInput, AdminLogUncheckedCreateInput>
  }

  /**
   * AdminLog createMany
   */
  export type AdminLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AdminLogs.
     */
    data: AdminLogCreateManyInput | AdminLogCreateManyInput[]
  }

  /**
   * AdminLog update
   */
  export type AdminLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminLog
     */
    omit?: AdminLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AdminLog.
     */
    data: XOR<AdminLogUpdateInput, AdminLogUncheckedUpdateInput>
    /**
     * Choose, which AdminLog to update.
     */
    where: AdminLogWhereUniqueInput
  }

  /**
   * AdminLog updateMany
   */
  export type AdminLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AdminLogs.
     */
    data: XOR<AdminLogUpdateManyMutationInput, AdminLogUncheckedUpdateManyInput>
    /**
     * Filter which AdminLogs to update
     */
    where?: AdminLogWhereInput
    /**
     * Limit how many AdminLogs to update.
     */
    limit?: number
  }

  /**
   * AdminLog upsert
   */
  export type AdminLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminLog
     */
    omit?: AdminLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AdminLog to update in case it exists.
     */
    where: AdminLogWhereUniqueInput
    /**
     * In case the AdminLog found by the `where` argument doesn't exist, create a new AdminLog with this data.
     */
    create: XOR<AdminLogCreateInput, AdminLogUncheckedCreateInput>
    /**
     * In case the AdminLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminLogUpdateInput, AdminLogUncheckedUpdateInput>
  }

  /**
   * AdminLog delete
   */
  export type AdminLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminLog
     */
    omit?: AdminLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminLogInclude<ExtArgs> | null
    /**
     * Filter which AdminLog to delete.
     */
    where: AdminLogWhereUniqueInput
  }

  /**
   * AdminLog deleteMany
   */
  export type AdminLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminLogs to delete
     */
    where?: AdminLogWhereInput
    /**
     * Limit how many AdminLogs to delete.
     */
    limit?: number
  }

  /**
   * AdminLog without action
   */
  export type AdminLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminLog
     */
    select?: AdminLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AdminLog
     */
    omit?: AdminLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminLogInclude<ExtArgs> | null
  }


  /**
   * Model Explanation
   */

  export type AggregateExplanation = {
    _count: ExplanationCountAggregateOutputType | null
    _avg: ExplanationAvgAggregateOutputType | null
    _sum: ExplanationSumAggregateOutputType | null
    _min: ExplanationMinAggregateOutputType | null
    _max: ExplanationMaxAggregateOutputType | null
  }

  export type ExplanationAvgAggregateOutputType = {
    id: number | null
    employeeId: number | null
  }

  export type ExplanationSumAggregateOutputType = {
    id: number | null
    employeeId: number | null
  }

  export type ExplanationMinAggregateOutputType = {
    id: number | null
    date: Date | null
    explanation: string | null
    status: string | null
    employeeId: number | null
    createdAt: Date | null
  }

  export type ExplanationMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    explanation: string | null
    status: string | null
    employeeId: number | null
    createdAt: Date | null
  }

  export type ExplanationCountAggregateOutputType = {
    id: number
    date: number
    explanation: number
    status: number
    employeeId: number
    createdAt: number
    _all: number
  }


  export type ExplanationAvgAggregateInputType = {
    id?: true
    employeeId?: true
  }

  export type ExplanationSumAggregateInputType = {
    id?: true
    employeeId?: true
  }

  export type ExplanationMinAggregateInputType = {
    id?: true
    date?: true
    explanation?: true
    status?: true
    employeeId?: true
    createdAt?: true
  }

  export type ExplanationMaxAggregateInputType = {
    id?: true
    date?: true
    explanation?: true
    status?: true
    employeeId?: true
    createdAt?: true
  }

  export type ExplanationCountAggregateInputType = {
    id?: true
    date?: true
    explanation?: true
    status?: true
    employeeId?: true
    createdAt?: true
    _all?: true
  }

  export type ExplanationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Explanation to aggregate.
     */
    where?: ExplanationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Explanations to fetch.
     */
    orderBy?: ExplanationOrderByWithRelationInput | ExplanationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExplanationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Explanations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Explanations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Explanations
    **/
    _count?: true | ExplanationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExplanationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExplanationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExplanationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExplanationMaxAggregateInputType
  }

  export type GetExplanationAggregateType<T extends ExplanationAggregateArgs> = {
        [P in keyof T & keyof AggregateExplanation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExplanation[P]>
      : GetScalarType<T[P], AggregateExplanation[P]>
  }




  export type ExplanationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExplanationWhereInput
    orderBy?: ExplanationOrderByWithAggregationInput | ExplanationOrderByWithAggregationInput[]
    by: ExplanationScalarFieldEnum[] | ExplanationScalarFieldEnum
    having?: ExplanationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExplanationCountAggregateInputType | true
    _avg?: ExplanationAvgAggregateInputType
    _sum?: ExplanationSumAggregateInputType
    _min?: ExplanationMinAggregateInputType
    _max?: ExplanationMaxAggregateInputType
  }

  export type ExplanationGroupByOutputType = {
    id: number
    date: Date
    explanation: string
    status: string
    employeeId: number
    createdAt: Date
    _count: ExplanationCountAggregateOutputType | null
    _avg: ExplanationAvgAggregateOutputType | null
    _sum: ExplanationSumAggregateOutputType | null
    _min: ExplanationMinAggregateOutputType | null
    _max: ExplanationMaxAggregateOutputType | null
  }

  type GetExplanationGroupByPayload<T extends ExplanationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExplanationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExplanationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExplanationGroupByOutputType[P]>
            : GetScalarType<T[P], ExplanationGroupByOutputType[P]>
        }
      >
    >


  export type ExplanationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    explanation?: boolean
    status?: boolean
    employeeId?: boolean
    createdAt?: boolean
    employee?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["explanation"]>



  export type ExplanationSelectScalar = {
    id?: boolean
    date?: boolean
    explanation?: boolean
    status?: boolean
    employeeId?: boolean
    createdAt?: boolean
  }

  export type ExplanationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "explanation" | "status" | "employeeId" | "createdAt", ExtArgs["result"]["explanation"]>
  export type ExplanationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ExplanationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Explanation"
    objects: {
      employee: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      explanation: string
      status: string
      employeeId: number
      createdAt: Date
    }, ExtArgs["result"]["explanation"]>
    composites: {}
  }

  type ExplanationGetPayload<S extends boolean | null | undefined | ExplanationDefaultArgs> = $Result.GetResult<Prisma.$ExplanationPayload, S>

  type ExplanationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExplanationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExplanationCountAggregateInputType | true
    }

  export interface ExplanationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Explanation'], meta: { name: 'Explanation' } }
    /**
     * Find zero or one Explanation that matches the filter.
     * @param {ExplanationFindUniqueArgs} args - Arguments to find a Explanation
     * @example
     * // Get one Explanation
     * const explanation = await prisma.explanation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExplanationFindUniqueArgs>(args: SelectSubset<T, ExplanationFindUniqueArgs<ExtArgs>>): Prisma__ExplanationClient<$Result.GetResult<Prisma.$ExplanationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Explanation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExplanationFindUniqueOrThrowArgs} args - Arguments to find a Explanation
     * @example
     * // Get one Explanation
     * const explanation = await prisma.explanation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExplanationFindUniqueOrThrowArgs>(args: SelectSubset<T, ExplanationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExplanationClient<$Result.GetResult<Prisma.$ExplanationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Explanation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExplanationFindFirstArgs} args - Arguments to find a Explanation
     * @example
     * // Get one Explanation
     * const explanation = await prisma.explanation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExplanationFindFirstArgs>(args?: SelectSubset<T, ExplanationFindFirstArgs<ExtArgs>>): Prisma__ExplanationClient<$Result.GetResult<Prisma.$ExplanationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Explanation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExplanationFindFirstOrThrowArgs} args - Arguments to find a Explanation
     * @example
     * // Get one Explanation
     * const explanation = await prisma.explanation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExplanationFindFirstOrThrowArgs>(args?: SelectSubset<T, ExplanationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExplanationClient<$Result.GetResult<Prisma.$ExplanationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Explanations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExplanationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Explanations
     * const explanations = await prisma.explanation.findMany()
     * 
     * // Get first 10 Explanations
     * const explanations = await prisma.explanation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const explanationWithIdOnly = await prisma.explanation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExplanationFindManyArgs>(args?: SelectSubset<T, ExplanationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExplanationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Explanation.
     * @param {ExplanationCreateArgs} args - Arguments to create a Explanation.
     * @example
     * // Create one Explanation
     * const Explanation = await prisma.explanation.create({
     *   data: {
     *     // ... data to create a Explanation
     *   }
     * })
     * 
     */
    create<T extends ExplanationCreateArgs>(args: SelectSubset<T, ExplanationCreateArgs<ExtArgs>>): Prisma__ExplanationClient<$Result.GetResult<Prisma.$ExplanationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Explanations.
     * @param {ExplanationCreateManyArgs} args - Arguments to create many Explanations.
     * @example
     * // Create many Explanations
     * const explanation = await prisma.explanation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExplanationCreateManyArgs>(args?: SelectSubset<T, ExplanationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Explanation.
     * @param {ExplanationDeleteArgs} args - Arguments to delete one Explanation.
     * @example
     * // Delete one Explanation
     * const Explanation = await prisma.explanation.delete({
     *   where: {
     *     // ... filter to delete one Explanation
     *   }
     * })
     * 
     */
    delete<T extends ExplanationDeleteArgs>(args: SelectSubset<T, ExplanationDeleteArgs<ExtArgs>>): Prisma__ExplanationClient<$Result.GetResult<Prisma.$ExplanationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Explanation.
     * @param {ExplanationUpdateArgs} args - Arguments to update one Explanation.
     * @example
     * // Update one Explanation
     * const explanation = await prisma.explanation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExplanationUpdateArgs>(args: SelectSubset<T, ExplanationUpdateArgs<ExtArgs>>): Prisma__ExplanationClient<$Result.GetResult<Prisma.$ExplanationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Explanations.
     * @param {ExplanationDeleteManyArgs} args - Arguments to filter Explanations to delete.
     * @example
     * // Delete a few Explanations
     * const { count } = await prisma.explanation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExplanationDeleteManyArgs>(args?: SelectSubset<T, ExplanationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Explanations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExplanationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Explanations
     * const explanation = await prisma.explanation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExplanationUpdateManyArgs>(args: SelectSubset<T, ExplanationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Explanation.
     * @param {ExplanationUpsertArgs} args - Arguments to update or create a Explanation.
     * @example
     * // Update or create a Explanation
     * const explanation = await prisma.explanation.upsert({
     *   create: {
     *     // ... data to create a Explanation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Explanation we want to update
     *   }
     * })
     */
    upsert<T extends ExplanationUpsertArgs>(args: SelectSubset<T, ExplanationUpsertArgs<ExtArgs>>): Prisma__ExplanationClient<$Result.GetResult<Prisma.$ExplanationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Explanations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExplanationCountArgs} args - Arguments to filter Explanations to count.
     * @example
     * // Count the number of Explanations
     * const count = await prisma.explanation.count({
     *   where: {
     *     // ... the filter for the Explanations we want to count
     *   }
     * })
    **/
    count<T extends ExplanationCountArgs>(
      args?: Subset<T, ExplanationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExplanationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Explanation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExplanationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExplanationAggregateArgs>(args: Subset<T, ExplanationAggregateArgs>): Prisma.PrismaPromise<GetExplanationAggregateType<T>>

    /**
     * Group by Explanation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExplanationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExplanationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExplanationGroupByArgs['orderBy'] }
        : { orderBy?: ExplanationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExplanationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExplanationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Explanation model
   */
  readonly fields: ExplanationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Explanation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExplanationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Explanation model
   */
  interface ExplanationFieldRefs {
    readonly id: FieldRef<"Explanation", 'Int'>
    readonly date: FieldRef<"Explanation", 'DateTime'>
    readonly explanation: FieldRef<"Explanation", 'String'>
    readonly status: FieldRef<"Explanation", 'String'>
    readonly employeeId: FieldRef<"Explanation", 'Int'>
    readonly createdAt: FieldRef<"Explanation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Explanation findUnique
   */
  export type ExplanationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Explanation
     */
    select?: ExplanationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Explanation
     */
    omit?: ExplanationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExplanationInclude<ExtArgs> | null
    /**
     * Filter, which Explanation to fetch.
     */
    where: ExplanationWhereUniqueInput
  }

  /**
   * Explanation findUniqueOrThrow
   */
  export type ExplanationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Explanation
     */
    select?: ExplanationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Explanation
     */
    omit?: ExplanationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExplanationInclude<ExtArgs> | null
    /**
     * Filter, which Explanation to fetch.
     */
    where: ExplanationWhereUniqueInput
  }

  /**
   * Explanation findFirst
   */
  export type ExplanationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Explanation
     */
    select?: ExplanationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Explanation
     */
    omit?: ExplanationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExplanationInclude<ExtArgs> | null
    /**
     * Filter, which Explanation to fetch.
     */
    where?: ExplanationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Explanations to fetch.
     */
    orderBy?: ExplanationOrderByWithRelationInput | ExplanationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Explanations.
     */
    cursor?: ExplanationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Explanations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Explanations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Explanations.
     */
    distinct?: ExplanationScalarFieldEnum | ExplanationScalarFieldEnum[]
  }

  /**
   * Explanation findFirstOrThrow
   */
  export type ExplanationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Explanation
     */
    select?: ExplanationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Explanation
     */
    omit?: ExplanationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExplanationInclude<ExtArgs> | null
    /**
     * Filter, which Explanation to fetch.
     */
    where?: ExplanationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Explanations to fetch.
     */
    orderBy?: ExplanationOrderByWithRelationInput | ExplanationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Explanations.
     */
    cursor?: ExplanationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Explanations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Explanations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Explanations.
     */
    distinct?: ExplanationScalarFieldEnum | ExplanationScalarFieldEnum[]
  }

  /**
   * Explanation findMany
   */
  export type ExplanationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Explanation
     */
    select?: ExplanationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Explanation
     */
    omit?: ExplanationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExplanationInclude<ExtArgs> | null
    /**
     * Filter, which Explanations to fetch.
     */
    where?: ExplanationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Explanations to fetch.
     */
    orderBy?: ExplanationOrderByWithRelationInput | ExplanationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Explanations.
     */
    cursor?: ExplanationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Explanations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Explanations.
     */
    skip?: number
    distinct?: ExplanationScalarFieldEnum | ExplanationScalarFieldEnum[]
  }

  /**
   * Explanation create
   */
  export type ExplanationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Explanation
     */
    select?: ExplanationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Explanation
     */
    omit?: ExplanationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExplanationInclude<ExtArgs> | null
    /**
     * The data needed to create a Explanation.
     */
    data: XOR<ExplanationCreateInput, ExplanationUncheckedCreateInput>
  }

  /**
   * Explanation createMany
   */
  export type ExplanationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Explanations.
     */
    data: ExplanationCreateManyInput | ExplanationCreateManyInput[]
  }

  /**
   * Explanation update
   */
  export type ExplanationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Explanation
     */
    select?: ExplanationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Explanation
     */
    omit?: ExplanationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExplanationInclude<ExtArgs> | null
    /**
     * The data needed to update a Explanation.
     */
    data: XOR<ExplanationUpdateInput, ExplanationUncheckedUpdateInput>
    /**
     * Choose, which Explanation to update.
     */
    where: ExplanationWhereUniqueInput
  }

  /**
   * Explanation updateMany
   */
  export type ExplanationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Explanations.
     */
    data: XOR<ExplanationUpdateManyMutationInput, ExplanationUncheckedUpdateManyInput>
    /**
     * Filter which Explanations to update
     */
    where?: ExplanationWhereInput
    /**
     * Limit how many Explanations to update.
     */
    limit?: number
  }

  /**
   * Explanation upsert
   */
  export type ExplanationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Explanation
     */
    select?: ExplanationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Explanation
     */
    omit?: ExplanationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExplanationInclude<ExtArgs> | null
    /**
     * The filter to search for the Explanation to update in case it exists.
     */
    where: ExplanationWhereUniqueInput
    /**
     * In case the Explanation found by the `where` argument doesn't exist, create a new Explanation with this data.
     */
    create: XOR<ExplanationCreateInput, ExplanationUncheckedCreateInput>
    /**
     * In case the Explanation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExplanationUpdateInput, ExplanationUncheckedUpdateInput>
  }

  /**
   * Explanation delete
   */
  export type ExplanationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Explanation
     */
    select?: ExplanationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Explanation
     */
    omit?: ExplanationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExplanationInclude<ExtArgs> | null
    /**
     * Filter which Explanation to delete.
     */
    where: ExplanationWhereUniqueInput
  }

  /**
   * Explanation deleteMany
   */
  export type ExplanationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Explanations to delete
     */
    where?: ExplanationWhereInput
    /**
     * Limit how many Explanations to delete.
     */
    limit?: number
  }

  /**
   * Explanation without action
   */
  export type ExplanationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Explanation
     */
    select?: ExplanationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Explanation
     */
    omit?: ExplanationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExplanationInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable',
    Snapshot: 'Snapshot'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    role: 'role',
    fullName: 'fullName',
    email: 'email',
    position: 'position',
    department: 'department',
    company: 'company',
    branch: 'branch',
    phone: 'phone',
    salary: 'salary',
    employeeCode: 'employeeCode',
    employeeType: 'employeeType',
    employeeGroup: 'employeeGroup',
    effectiveDate: 'effectiveDate',
    beginDate: 'beginDate',
    sso: 'sso',
    tax: 'tax',
    payrollRound: 'payrollRound',
    salaryRound: 'salaryRound',
    individualSetting: 'individualSetting',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const WorkRecordScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    date: 'date',
    workHours: 'workHours',
    overtime: 'overtime',
    shiftStart: 'shiftStart',
    shiftEnd: 'shiftEnd',
    status: 'status',
    note: 'note',
    clockIn: 'clockIn',
    clockOut: 'clockOut'
  };

  export type WorkRecordScalarFieldEnum = (typeof WorkRecordScalarFieldEnum)[keyof typeof WorkRecordScalarFieldEnum]


  export const OTRequestScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    date: 'date',
    reason: 'reason',
    hours: 'hours',
    approved: 'approved',
    approverId: 'approverId',
    createdAt: 'createdAt'
  };

  export type OTRequestScalarFieldEnum = (typeof OTRequestScalarFieldEnum)[keyof typeof OTRequestScalarFieldEnum]


  export const ReminderScalarFieldEnum: {
    id: 'id',
    title: 'title',
    details: 'details',
    dueDate: 'dueDate',
    repeat: 'repeat',
    isDone: 'isDone',
    target: 'target',
    type: 'type',
    notifyBeforeDays: 'notifyBeforeDays',
    notifiedMorning: 'notifiedMorning',
    notifiedAfternoon: 'notifiedAfternoon',
    notifiedEvening: 'notifiedEvening',
    createdAt: 'createdAt'
  };

  export type ReminderScalarFieldEnum = (typeof ReminderScalarFieldEnum)[keyof typeof ReminderScalarFieldEnum]


  export const PasswordStoreScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    label: 'label',
    username: 'username',
    password: 'password',
    notes: 'notes',
    createdAt: 'createdAt'
  };

  export type PasswordStoreScalarFieldEnum = (typeof PasswordStoreScalarFieldEnum)[keyof typeof PasswordStoreScalarFieldEnum]


  export const AdminLogScalarFieldEnum: {
    id: 'id',
    adminId: 'adminId',
    action: 'action',
    timestamp: 'timestamp',
    details: 'details'
  };

  export type AdminLogScalarFieldEnum = (typeof AdminLogScalarFieldEnum)[keyof typeof AdminLogScalarFieldEnum]


  export const ExplanationScalarFieldEnum: {
    id: 'id',
    date: 'date',
    explanation: 'explanation',
    status: 'status',
    employeeId: 'employeeId',
    createdAt: 'createdAt'
  };

  export type ExplanationScalarFieldEnum = (typeof ExplanationScalarFieldEnum)[keyof typeof ExplanationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    fullName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    position?: StringNullableFilter<"User"> | string | null
    department?: StringNullableFilter<"User"> | string | null
    company?: StringNullableFilter<"User"> | string | null
    branch?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    salary?: FloatNullableFilter<"User"> | number | null
    employeeCode?: StringNullableFilter<"User"> | string | null
    employeeType?: StringNullableFilter<"User"> | string | null
    employeeGroup?: StringNullableFilter<"User"> | string | null
    effectiveDate?: DateTimeNullableFilter<"User"> | Date | string | null
    beginDate?: DateTimeNullableFilter<"User"> | Date | string | null
    sso?: BoolNullableFilter<"User"> | boolean | null
    tax?: BoolNullableFilter<"User"> | boolean | null
    payrollRound?: StringNullableFilter<"User"> | string | null
    salaryRound?: StringNullableFilter<"User"> | string | null
    individualSetting?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeNullableFilter<"User"> | Date | string | null
    explanations?: ExplanationListRelationFilter
    workRecords?: WorkRecordListRelationFilter
    otRequests?: OTRequestListRelationFilter
    adminLogs?: AdminLogListRelationFilter
    passwordStore?: PasswordStoreListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    position?: SortOrderInput | SortOrder
    department?: SortOrderInput | SortOrder
    company?: SortOrderInput | SortOrder
    branch?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    salary?: SortOrderInput | SortOrder
    employeeCode?: SortOrderInput | SortOrder
    employeeType?: SortOrderInput | SortOrder
    employeeGroup?: SortOrderInput | SortOrder
    effectiveDate?: SortOrderInput | SortOrder
    beginDate?: SortOrderInput | SortOrder
    sso?: SortOrderInput | SortOrder
    tax?: SortOrderInput | SortOrder
    payrollRound?: SortOrderInput | SortOrder
    salaryRound?: SortOrderInput | SortOrder
    individualSetting?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    explanations?: ExplanationOrderByRelationAggregateInput
    workRecords?: WorkRecordOrderByRelationAggregateInput
    otRequests?: OTRequestOrderByRelationAggregateInput
    adminLogs?: AdminLogOrderByRelationAggregateInput
    passwordStore?: PasswordStoreOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    email?: string
    employeeCode?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    fullName?: StringFilter<"User"> | string
    position?: StringNullableFilter<"User"> | string | null
    department?: StringNullableFilter<"User"> | string | null
    company?: StringNullableFilter<"User"> | string | null
    branch?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    salary?: FloatNullableFilter<"User"> | number | null
    employeeType?: StringNullableFilter<"User"> | string | null
    employeeGroup?: StringNullableFilter<"User"> | string | null
    effectiveDate?: DateTimeNullableFilter<"User"> | Date | string | null
    beginDate?: DateTimeNullableFilter<"User"> | Date | string | null
    sso?: BoolNullableFilter<"User"> | boolean | null
    tax?: BoolNullableFilter<"User"> | boolean | null
    payrollRound?: StringNullableFilter<"User"> | string | null
    salaryRound?: StringNullableFilter<"User"> | string | null
    individualSetting?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeNullableFilter<"User"> | Date | string | null
    explanations?: ExplanationListRelationFilter
    workRecords?: WorkRecordListRelationFilter
    otRequests?: OTRequestListRelationFilter
    adminLogs?: AdminLogListRelationFilter
    passwordStore?: PasswordStoreListRelationFilter
  }, "id" | "username" | "email" | "employeeCode">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    position?: SortOrderInput | SortOrder
    department?: SortOrderInput | SortOrder
    company?: SortOrderInput | SortOrder
    branch?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    salary?: SortOrderInput | SortOrder
    employeeCode?: SortOrderInput | SortOrder
    employeeType?: SortOrderInput | SortOrder
    employeeGroup?: SortOrderInput | SortOrder
    effectiveDate?: SortOrderInput | SortOrder
    beginDate?: SortOrderInput | SortOrder
    sso?: SortOrderInput | SortOrder
    tax?: SortOrderInput | SortOrder
    payrollRound?: SortOrderInput | SortOrder
    salaryRound?: SortOrderInput | SortOrder
    individualSetting?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    fullName?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    position?: StringNullableWithAggregatesFilter<"User"> | string | null
    department?: StringNullableWithAggregatesFilter<"User"> | string | null
    company?: StringNullableWithAggregatesFilter<"User"> | string | null
    branch?: StringNullableWithAggregatesFilter<"User"> | string | null
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    salary?: FloatNullableWithAggregatesFilter<"User"> | number | null
    employeeCode?: StringNullableWithAggregatesFilter<"User"> | string | null
    employeeType?: StringNullableWithAggregatesFilter<"User"> | string | null
    employeeGroup?: StringNullableWithAggregatesFilter<"User"> | string | null
    effectiveDate?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    beginDate?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    sso?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    tax?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    payrollRound?: StringNullableWithAggregatesFilter<"User"> | string | null
    salaryRound?: StringNullableWithAggregatesFilter<"User"> | string | null
    individualSetting?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type WorkRecordWhereInput = {
    AND?: WorkRecordWhereInput | WorkRecordWhereInput[]
    OR?: WorkRecordWhereInput[]
    NOT?: WorkRecordWhereInput | WorkRecordWhereInput[]
    id?: IntFilter<"WorkRecord"> | number
    userId?: IntFilter<"WorkRecord"> | number
    date?: DateTimeFilter<"WorkRecord"> | Date | string
    workHours?: FloatNullableFilter<"WorkRecord"> | number | null
    overtime?: FloatNullableFilter<"WorkRecord"> | number | null
    shiftStart?: StringNullableFilter<"WorkRecord"> | string | null
    shiftEnd?: StringNullableFilter<"WorkRecord"> | string | null
    status?: StringNullableFilter<"WorkRecord"> | string | null
    note?: StringNullableFilter<"WorkRecord"> | string | null
    clockIn?: DateTimeNullableFilter<"WorkRecord"> | Date | string | null
    clockOut?: DateTimeNullableFilter<"WorkRecord"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type WorkRecordOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    workHours?: SortOrderInput | SortOrder
    overtime?: SortOrderInput | SortOrder
    shiftStart?: SortOrderInput | SortOrder
    shiftEnd?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    note?: SortOrderInput | SortOrder
    clockIn?: SortOrderInput | SortOrder
    clockOut?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type WorkRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WorkRecordWhereInput | WorkRecordWhereInput[]
    OR?: WorkRecordWhereInput[]
    NOT?: WorkRecordWhereInput | WorkRecordWhereInput[]
    userId?: IntFilter<"WorkRecord"> | number
    date?: DateTimeFilter<"WorkRecord"> | Date | string
    workHours?: FloatNullableFilter<"WorkRecord"> | number | null
    overtime?: FloatNullableFilter<"WorkRecord"> | number | null
    shiftStart?: StringNullableFilter<"WorkRecord"> | string | null
    shiftEnd?: StringNullableFilter<"WorkRecord"> | string | null
    status?: StringNullableFilter<"WorkRecord"> | string | null
    note?: StringNullableFilter<"WorkRecord"> | string | null
    clockIn?: DateTimeNullableFilter<"WorkRecord"> | Date | string | null
    clockOut?: DateTimeNullableFilter<"WorkRecord"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type WorkRecordOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    workHours?: SortOrderInput | SortOrder
    overtime?: SortOrderInput | SortOrder
    shiftStart?: SortOrderInput | SortOrder
    shiftEnd?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    note?: SortOrderInput | SortOrder
    clockIn?: SortOrderInput | SortOrder
    clockOut?: SortOrderInput | SortOrder
    _count?: WorkRecordCountOrderByAggregateInput
    _avg?: WorkRecordAvgOrderByAggregateInput
    _max?: WorkRecordMaxOrderByAggregateInput
    _min?: WorkRecordMinOrderByAggregateInput
    _sum?: WorkRecordSumOrderByAggregateInput
  }

  export type WorkRecordScalarWhereWithAggregatesInput = {
    AND?: WorkRecordScalarWhereWithAggregatesInput | WorkRecordScalarWhereWithAggregatesInput[]
    OR?: WorkRecordScalarWhereWithAggregatesInput[]
    NOT?: WorkRecordScalarWhereWithAggregatesInput | WorkRecordScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WorkRecord"> | number
    userId?: IntWithAggregatesFilter<"WorkRecord"> | number
    date?: DateTimeWithAggregatesFilter<"WorkRecord"> | Date | string
    workHours?: FloatNullableWithAggregatesFilter<"WorkRecord"> | number | null
    overtime?: FloatNullableWithAggregatesFilter<"WorkRecord"> | number | null
    shiftStart?: StringNullableWithAggregatesFilter<"WorkRecord"> | string | null
    shiftEnd?: StringNullableWithAggregatesFilter<"WorkRecord"> | string | null
    status?: StringNullableWithAggregatesFilter<"WorkRecord"> | string | null
    note?: StringNullableWithAggregatesFilter<"WorkRecord"> | string | null
    clockIn?: DateTimeNullableWithAggregatesFilter<"WorkRecord"> | Date | string | null
    clockOut?: DateTimeNullableWithAggregatesFilter<"WorkRecord"> | Date | string | null
  }

  export type OTRequestWhereInput = {
    AND?: OTRequestWhereInput | OTRequestWhereInput[]
    OR?: OTRequestWhereInput[]
    NOT?: OTRequestWhereInput | OTRequestWhereInput[]
    id?: IntFilter<"OTRequest"> | number
    userId?: IntFilter<"OTRequest"> | number
    date?: DateTimeFilter<"OTRequest"> | Date | string
    reason?: StringFilter<"OTRequest"> | string
    hours?: FloatFilter<"OTRequest"> | number
    approved?: BoolNullableFilter<"OTRequest"> | boolean | null
    approverId?: IntNullableFilter<"OTRequest"> | number | null
    createdAt?: DateTimeNullableFilter<"OTRequest"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type OTRequestOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    reason?: SortOrder
    hours?: SortOrder
    approved?: SortOrderInput | SortOrder
    approverId?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type OTRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OTRequestWhereInput | OTRequestWhereInput[]
    OR?: OTRequestWhereInput[]
    NOT?: OTRequestWhereInput | OTRequestWhereInput[]
    userId?: IntFilter<"OTRequest"> | number
    date?: DateTimeFilter<"OTRequest"> | Date | string
    reason?: StringFilter<"OTRequest"> | string
    hours?: FloatFilter<"OTRequest"> | number
    approved?: BoolNullableFilter<"OTRequest"> | boolean | null
    approverId?: IntNullableFilter<"OTRequest"> | number | null
    createdAt?: DateTimeNullableFilter<"OTRequest"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type OTRequestOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    reason?: SortOrder
    hours?: SortOrder
    approved?: SortOrderInput | SortOrder
    approverId?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    _count?: OTRequestCountOrderByAggregateInput
    _avg?: OTRequestAvgOrderByAggregateInput
    _max?: OTRequestMaxOrderByAggregateInput
    _min?: OTRequestMinOrderByAggregateInput
    _sum?: OTRequestSumOrderByAggregateInput
  }

  export type OTRequestScalarWhereWithAggregatesInput = {
    AND?: OTRequestScalarWhereWithAggregatesInput | OTRequestScalarWhereWithAggregatesInput[]
    OR?: OTRequestScalarWhereWithAggregatesInput[]
    NOT?: OTRequestScalarWhereWithAggregatesInput | OTRequestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OTRequest"> | number
    userId?: IntWithAggregatesFilter<"OTRequest"> | number
    date?: DateTimeWithAggregatesFilter<"OTRequest"> | Date | string
    reason?: StringWithAggregatesFilter<"OTRequest"> | string
    hours?: FloatWithAggregatesFilter<"OTRequest"> | number
    approved?: BoolNullableWithAggregatesFilter<"OTRequest"> | boolean | null
    approverId?: IntNullableWithAggregatesFilter<"OTRequest"> | number | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"OTRequest"> | Date | string | null
  }

  export type ReminderWhereInput = {
    AND?: ReminderWhereInput | ReminderWhereInput[]
    OR?: ReminderWhereInput[]
    NOT?: ReminderWhereInput | ReminderWhereInput[]
    id?: IntFilter<"Reminder"> | number
    title?: StringFilter<"Reminder"> | string
    details?: StringNullableFilter<"Reminder"> | string | null
    dueDate?: DateTimeFilter<"Reminder"> | Date | string
    repeat?: StringNullableFilter<"Reminder"> | string | null
    isDone?: BoolNullableFilter<"Reminder"> | boolean | null
    target?: StringNullableFilter<"Reminder"> | string | null
    type?: StringNullableFilter<"Reminder"> | string | null
    notifyBeforeDays?: IntNullableFilter<"Reminder"> | number | null
    notifiedMorning?: BoolNullableFilter<"Reminder"> | boolean | null
    notifiedAfternoon?: BoolNullableFilter<"Reminder"> | boolean | null
    notifiedEvening?: BoolNullableFilter<"Reminder"> | boolean | null
    createdAt?: DateTimeNullableFilter<"Reminder"> | Date | string | null
  }

  export type ReminderOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    details?: SortOrderInput | SortOrder
    dueDate?: SortOrder
    repeat?: SortOrderInput | SortOrder
    isDone?: SortOrderInput | SortOrder
    target?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    notifyBeforeDays?: SortOrderInput | SortOrder
    notifiedMorning?: SortOrderInput | SortOrder
    notifiedAfternoon?: SortOrderInput | SortOrder
    notifiedEvening?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
  }

  export type ReminderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReminderWhereInput | ReminderWhereInput[]
    OR?: ReminderWhereInput[]
    NOT?: ReminderWhereInput | ReminderWhereInput[]
    title?: StringFilter<"Reminder"> | string
    details?: StringNullableFilter<"Reminder"> | string | null
    dueDate?: DateTimeFilter<"Reminder"> | Date | string
    repeat?: StringNullableFilter<"Reminder"> | string | null
    isDone?: BoolNullableFilter<"Reminder"> | boolean | null
    target?: StringNullableFilter<"Reminder"> | string | null
    type?: StringNullableFilter<"Reminder"> | string | null
    notifyBeforeDays?: IntNullableFilter<"Reminder"> | number | null
    notifiedMorning?: BoolNullableFilter<"Reminder"> | boolean | null
    notifiedAfternoon?: BoolNullableFilter<"Reminder"> | boolean | null
    notifiedEvening?: BoolNullableFilter<"Reminder"> | boolean | null
    createdAt?: DateTimeNullableFilter<"Reminder"> | Date | string | null
  }, "id">

  export type ReminderOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    details?: SortOrderInput | SortOrder
    dueDate?: SortOrder
    repeat?: SortOrderInput | SortOrder
    isDone?: SortOrderInput | SortOrder
    target?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    notifyBeforeDays?: SortOrderInput | SortOrder
    notifiedMorning?: SortOrderInput | SortOrder
    notifiedAfternoon?: SortOrderInput | SortOrder
    notifiedEvening?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    _count?: ReminderCountOrderByAggregateInput
    _avg?: ReminderAvgOrderByAggregateInput
    _max?: ReminderMaxOrderByAggregateInput
    _min?: ReminderMinOrderByAggregateInput
    _sum?: ReminderSumOrderByAggregateInput
  }

  export type ReminderScalarWhereWithAggregatesInput = {
    AND?: ReminderScalarWhereWithAggregatesInput | ReminderScalarWhereWithAggregatesInput[]
    OR?: ReminderScalarWhereWithAggregatesInput[]
    NOT?: ReminderScalarWhereWithAggregatesInput | ReminderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Reminder"> | number
    title?: StringWithAggregatesFilter<"Reminder"> | string
    details?: StringNullableWithAggregatesFilter<"Reminder"> | string | null
    dueDate?: DateTimeWithAggregatesFilter<"Reminder"> | Date | string
    repeat?: StringNullableWithAggregatesFilter<"Reminder"> | string | null
    isDone?: BoolNullableWithAggregatesFilter<"Reminder"> | boolean | null
    target?: StringNullableWithAggregatesFilter<"Reminder"> | string | null
    type?: StringNullableWithAggregatesFilter<"Reminder"> | string | null
    notifyBeforeDays?: IntNullableWithAggregatesFilter<"Reminder"> | number | null
    notifiedMorning?: BoolNullableWithAggregatesFilter<"Reminder"> | boolean | null
    notifiedAfternoon?: BoolNullableWithAggregatesFilter<"Reminder"> | boolean | null
    notifiedEvening?: BoolNullableWithAggregatesFilter<"Reminder"> | boolean | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"Reminder"> | Date | string | null
  }

  export type PasswordStoreWhereInput = {
    AND?: PasswordStoreWhereInput | PasswordStoreWhereInput[]
    OR?: PasswordStoreWhereInput[]
    NOT?: PasswordStoreWhereInput | PasswordStoreWhereInput[]
    id?: IntFilter<"PasswordStore"> | number
    userId?: IntFilter<"PasswordStore"> | number
    label?: StringFilter<"PasswordStore"> | string
    username?: StringFilter<"PasswordStore"> | string
    password?: StringFilter<"PasswordStore"> | string
    notes?: StringNullableFilter<"PasswordStore"> | string | null
    createdAt?: DateTimeNullableFilter<"PasswordStore"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PasswordStoreOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    label?: SortOrder
    username?: SortOrder
    password?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type PasswordStoreWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PasswordStoreWhereInput | PasswordStoreWhereInput[]
    OR?: PasswordStoreWhereInput[]
    NOT?: PasswordStoreWhereInput | PasswordStoreWhereInput[]
    userId?: IntFilter<"PasswordStore"> | number
    label?: StringFilter<"PasswordStore"> | string
    username?: StringFilter<"PasswordStore"> | string
    password?: StringFilter<"PasswordStore"> | string
    notes?: StringNullableFilter<"PasswordStore"> | string | null
    createdAt?: DateTimeNullableFilter<"PasswordStore"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type PasswordStoreOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    label?: SortOrder
    username?: SortOrder
    password?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    _count?: PasswordStoreCountOrderByAggregateInput
    _avg?: PasswordStoreAvgOrderByAggregateInput
    _max?: PasswordStoreMaxOrderByAggregateInput
    _min?: PasswordStoreMinOrderByAggregateInput
    _sum?: PasswordStoreSumOrderByAggregateInput
  }

  export type PasswordStoreScalarWhereWithAggregatesInput = {
    AND?: PasswordStoreScalarWhereWithAggregatesInput | PasswordStoreScalarWhereWithAggregatesInput[]
    OR?: PasswordStoreScalarWhereWithAggregatesInput[]
    NOT?: PasswordStoreScalarWhereWithAggregatesInput | PasswordStoreScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PasswordStore"> | number
    userId?: IntWithAggregatesFilter<"PasswordStore"> | number
    label?: StringWithAggregatesFilter<"PasswordStore"> | string
    username?: StringWithAggregatesFilter<"PasswordStore"> | string
    password?: StringWithAggregatesFilter<"PasswordStore"> | string
    notes?: StringNullableWithAggregatesFilter<"PasswordStore"> | string | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"PasswordStore"> | Date | string | null
  }

  export type AdminLogWhereInput = {
    AND?: AdminLogWhereInput | AdminLogWhereInput[]
    OR?: AdminLogWhereInput[]
    NOT?: AdminLogWhereInput | AdminLogWhereInput[]
    id?: IntFilter<"AdminLog"> | number
    adminId?: IntFilter<"AdminLog"> | number
    action?: StringFilter<"AdminLog"> | string
    timestamp?: DateTimeNullableFilter<"AdminLog"> | Date | string | null
    details?: StringNullableFilter<"AdminLog"> | string | null
    admin?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AdminLogOrderByWithRelationInput = {
    id?: SortOrder
    adminId?: SortOrder
    action?: SortOrder
    timestamp?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    admin?: UserOrderByWithRelationInput
  }

  export type AdminLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AdminLogWhereInput | AdminLogWhereInput[]
    OR?: AdminLogWhereInput[]
    NOT?: AdminLogWhereInput | AdminLogWhereInput[]
    adminId?: IntFilter<"AdminLog"> | number
    action?: StringFilter<"AdminLog"> | string
    timestamp?: DateTimeNullableFilter<"AdminLog"> | Date | string | null
    details?: StringNullableFilter<"AdminLog"> | string | null
    admin?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AdminLogOrderByWithAggregationInput = {
    id?: SortOrder
    adminId?: SortOrder
    action?: SortOrder
    timestamp?: SortOrderInput | SortOrder
    details?: SortOrderInput | SortOrder
    _count?: AdminLogCountOrderByAggregateInput
    _avg?: AdminLogAvgOrderByAggregateInput
    _max?: AdminLogMaxOrderByAggregateInput
    _min?: AdminLogMinOrderByAggregateInput
    _sum?: AdminLogSumOrderByAggregateInput
  }

  export type AdminLogScalarWhereWithAggregatesInput = {
    AND?: AdminLogScalarWhereWithAggregatesInput | AdminLogScalarWhereWithAggregatesInput[]
    OR?: AdminLogScalarWhereWithAggregatesInput[]
    NOT?: AdminLogScalarWhereWithAggregatesInput | AdminLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AdminLog"> | number
    adminId?: IntWithAggregatesFilter<"AdminLog"> | number
    action?: StringWithAggregatesFilter<"AdminLog"> | string
    timestamp?: DateTimeNullableWithAggregatesFilter<"AdminLog"> | Date | string | null
    details?: StringNullableWithAggregatesFilter<"AdminLog"> | string | null
  }

  export type ExplanationWhereInput = {
    AND?: ExplanationWhereInput | ExplanationWhereInput[]
    OR?: ExplanationWhereInput[]
    NOT?: ExplanationWhereInput | ExplanationWhereInput[]
    id?: IntFilter<"Explanation"> | number
    date?: DateTimeFilter<"Explanation"> | Date | string
    explanation?: StringFilter<"Explanation"> | string
    status?: StringFilter<"Explanation"> | string
    employeeId?: IntFilter<"Explanation"> | number
    createdAt?: DateTimeFilter<"Explanation"> | Date | string
    employee?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ExplanationOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    explanation?: SortOrder
    status?: SortOrder
    employeeId?: SortOrder
    createdAt?: SortOrder
    employee?: UserOrderByWithRelationInput
  }

  export type ExplanationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ExplanationWhereInput | ExplanationWhereInput[]
    OR?: ExplanationWhereInput[]
    NOT?: ExplanationWhereInput | ExplanationWhereInput[]
    date?: DateTimeFilter<"Explanation"> | Date | string
    explanation?: StringFilter<"Explanation"> | string
    status?: StringFilter<"Explanation"> | string
    employeeId?: IntFilter<"Explanation"> | number
    createdAt?: DateTimeFilter<"Explanation"> | Date | string
    employee?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ExplanationOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    explanation?: SortOrder
    status?: SortOrder
    employeeId?: SortOrder
    createdAt?: SortOrder
    _count?: ExplanationCountOrderByAggregateInput
    _avg?: ExplanationAvgOrderByAggregateInput
    _max?: ExplanationMaxOrderByAggregateInput
    _min?: ExplanationMinOrderByAggregateInput
    _sum?: ExplanationSumOrderByAggregateInput
  }

  export type ExplanationScalarWhereWithAggregatesInput = {
    AND?: ExplanationScalarWhereWithAggregatesInput | ExplanationScalarWhereWithAggregatesInput[]
    OR?: ExplanationScalarWhereWithAggregatesInput[]
    NOT?: ExplanationScalarWhereWithAggregatesInput | ExplanationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Explanation"> | number
    date?: DateTimeWithAggregatesFilter<"Explanation"> | Date | string
    explanation?: StringWithAggregatesFilter<"Explanation"> | string
    status?: StringWithAggregatesFilter<"Explanation"> | string
    employeeId?: IntWithAggregatesFilter<"Explanation"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Explanation"> | Date | string
  }

  export type UserCreateInput = {
    username: string
    password: string
    role?: string
    fullName: string
    email: string
    position?: string | null
    department?: string | null
    company?: string | null
    branch?: string | null
    phone?: string | null
    salary?: number | null
    employeeCode?: string | null
    employeeType?: string | null
    employeeGroup?: string | null
    effectiveDate?: Date | string | null
    beginDate?: Date | string | null
    sso?: boolean | null
    tax?: boolean | null
    payrollRound?: string | null
    salaryRound?: string | null
    individualSetting?: string | null
    createdAt?: Date | string | null
    explanations?: ExplanationCreateNestedManyWithoutEmployeeInput
    workRecords?: WorkRecordCreateNestedManyWithoutUserInput
    otRequests?: OTRequestCreateNestedManyWithoutUserInput
    adminLogs?: AdminLogCreateNestedManyWithoutAdminInput
    passwordStore?: PasswordStoreCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    username: string
    password: string
    role?: string
    fullName: string
    email: string
    position?: string | null
    department?: string | null
    company?: string | null
    branch?: string | null
    phone?: string | null
    salary?: number | null
    employeeCode?: string | null
    employeeType?: string | null
    employeeGroup?: string | null
    effectiveDate?: Date | string | null
    beginDate?: Date | string | null
    sso?: boolean | null
    tax?: boolean | null
    payrollRound?: string | null
    salaryRound?: string | null
    individualSetting?: string | null
    createdAt?: Date | string | null
    explanations?: ExplanationUncheckedCreateNestedManyWithoutEmployeeInput
    workRecords?: WorkRecordUncheckedCreateNestedManyWithoutUserInput
    otRequests?: OTRequestUncheckedCreateNestedManyWithoutUserInput
    adminLogs?: AdminLogUncheckedCreateNestedManyWithoutAdminInput
    passwordStore?: PasswordStoreUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    employeeType?: NullableStringFieldUpdateOperationsInput | string | null
    employeeGroup?: NullableStringFieldUpdateOperationsInput | string | null
    effectiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    beginDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sso?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tax?: NullableBoolFieldUpdateOperationsInput | boolean | null
    payrollRound?: NullableStringFieldUpdateOperationsInput | string | null
    salaryRound?: NullableStringFieldUpdateOperationsInput | string | null
    individualSetting?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    explanations?: ExplanationUpdateManyWithoutEmployeeNestedInput
    workRecords?: WorkRecordUpdateManyWithoutUserNestedInput
    otRequests?: OTRequestUpdateManyWithoutUserNestedInput
    adminLogs?: AdminLogUpdateManyWithoutAdminNestedInput
    passwordStore?: PasswordStoreUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    employeeType?: NullableStringFieldUpdateOperationsInput | string | null
    employeeGroup?: NullableStringFieldUpdateOperationsInput | string | null
    effectiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    beginDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sso?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tax?: NullableBoolFieldUpdateOperationsInput | boolean | null
    payrollRound?: NullableStringFieldUpdateOperationsInput | string | null
    salaryRound?: NullableStringFieldUpdateOperationsInput | string | null
    individualSetting?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    explanations?: ExplanationUncheckedUpdateManyWithoutEmployeeNestedInput
    workRecords?: WorkRecordUncheckedUpdateManyWithoutUserNestedInput
    otRequests?: OTRequestUncheckedUpdateManyWithoutUserNestedInput
    adminLogs?: AdminLogUncheckedUpdateManyWithoutAdminNestedInput
    passwordStore?: PasswordStoreUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    username: string
    password: string
    role?: string
    fullName: string
    email: string
    position?: string | null
    department?: string | null
    company?: string | null
    branch?: string | null
    phone?: string | null
    salary?: number | null
    employeeCode?: string | null
    employeeType?: string | null
    employeeGroup?: string | null
    effectiveDate?: Date | string | null
    beginDate?: Date | string | null
    sso?: boolean | null
    tax?: boolean | null
    payrollRound?: string | null
    salaryRound?: string | null
    individualSetting?: string | null
    createdAt?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    employeeType?: NullableStringFieldUpdateOperationsInput | string | null
    employeeGroup?: NullableStringFieldUpdateOperationsInput | string | null
    effectiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    beginDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sso?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tax?: NullableBoolFieldUpdateOperationsInput | boolean | null
    payrollRound?: NullableStringFieldUpdateOperationsInput | string | null
    salaryRound?: NullableStringFieldUpdateOperationsInput | string | null
    individualSetting?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    employeeType?: NullableStringFieldUpdateOperationsInput | string | null
    employeeGroup?: NullableStringFieldUpdateOperationsInput | string | null
    effectiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    beginDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sso?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tax?: NullableBoolFieldUpdateOperationsInput | boolean | null
    payrollRound?: NullableStringFieldUpdateOperationsInput | string | null
    salaryRound?: NullableStringFieldUpdateOperationsInput | string | null
    individualSetting?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WorkRecordCreateInput = {
    date: Date | string
    workHours?: number | null
    overtime?: number | null
    shiftStart?: string | null
    shiftEnd?: string | null
    status?: string | null
    note?: string | null
    clockIn?: Date | string | null
    clockOut?: Date | string | null
    user: UserCreateNestedOneWithoutWorkRecordsInput
  }

  export type WorkRecordUncheckedCreateInput = {
    id?: number
    userId: number
    date: Date | string
    workHours?: number | null
    overtime?: number | null
    shiftStart?: string | null
    shiftEnd?: string | null
    status?: string | null
    note?: string | null
    clockIn?: Date | string | null
    clockOut?: Date | string | null
  }

  export type WorkRecordUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    workHours?: NullableFloatFieldUpdateOperationsInput | number | null
    overtime?: NullableFloatFieldUpdateOperationsInput | number | null
    shiftStart?: NullableStringFieldUpdateOperationsInput | string | null
    shiftEnd?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    clockIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clockOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutWorkRecordsNestedInput
  }

  export type WorkRecordUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    workHours?: NullableFloatFieldUpdateOperationsInput | number | null
    overtime?: NullableFloatFieldUpdateOperationsInput | number | null
    shiftStart?: NullableStringFieldUpdateOperationsInput | string | null
    shiftEnd?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    clockIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clockOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WorkRecordCreateManyInput = {
    userId: number
    date: Date | string
    workHours?: number | null
    overtime?: number | null
    shiftStart?: string | null
    shiftEnd?: string | null
    status?: string | null
    note?: string | null
    clockIn?: Date | string | null
    clockOut?: Date | string | null
  }

  export type WorkRecordUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    workHours?: NullableFloatFieldUpdateOperationsInput | number | null
    overtime?: NullableFloatFieldUpdateOperationsInput | number | null
    shiftStart?: NullableStringFieldUpdateOperationsInput | string | null
    shiftEnd?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    clockIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clockOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WorkRecordUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    workHours?: NullableFloatFieldUpdateOperationsInput | number | null
    overtime?: NullableFloatFieldUpdateOperationsInput | number | null
    shiftStart?: NullableStringFieldUpdateOperationsInput | string | null
    shiftEnd?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    clockIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clockOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OTRequestCreateInput = {
    date: Date | string
    reason: string
    hours: number
    approved?: boolean | null
    approverId?: number | null
    createdAt?: Date | string | null
    user: UserCreateNestedOneWithoutOtRequestsInput
  }

  export type OTRequestUncheckedCreateInput = {
    id?: number
    userId: number
    date: Date | string
    reason: string
    hours: number
    approved?: boolean | null
    approverId?: number | null
    createdAt?: Date | string | null
  }

  export type OTRequestUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    hours?: FloatFieldUpdateOperationsInput | number
    approved?: NullableBoolFieldUpdateOperationsInput | boolean | null
    approverId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutOtRequestsNestedInput
  }

  export type OTRequestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    hours?: FloatFieldUpdateOperationsInput | number
    approved?: NullableBoolFieldUpdateOperationsInput | boolean | null
    approverId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OTRequestCreateManyInput = {
    userId: number
    date: Date | string
    reason: string
    hours: number
    approved?: boolean | null
    approverId?: number | null
    createdAt?: Date | string | null
  }

  export type OTRequestUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    hours?: FloatFieldUpdateOperationsInput | number
    approved?: NullableBoolFieldUpdateOperationsInput | boolean | null
    approverId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OTRequestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    hours?: FloatFieldUpdateOperationsInput | number
    approved?: NullableBoolFieldUpdateOperationsInput | boolean | null
    approverId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReminderCreateInput = {
    title: string
    details?: string | null
    dueDate: Date | string
    repeat?: string | null
    isDone?: boolean | null
    target?: string | null
    type?: string | null
    notifyBeforeDays?: number | null
    notifiedMorning?: boolean | null
    notifiedAfternoon?: boolean | null
    notifiedEvening?: boolean | null
    createdAt?: Date | string | null
  }

  export type ReminderUncheckedCreateInput = {
    id?: number
    title: string
    details?: string | null
    dueDate: Date | string
    repeat?: string | null
    isDone?: boolean | null
    target?: string | null
    type?: string | null
    notifyBeforeDays?: number | null
    notifiedMorning?: boolean | null
    notifiedAfternoon?: boolean | null
    notifiedEvening?: boolean | null
    createdAt?: Date | string | null
  }

  export type ReminderUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    repeat?: NullableStringFieldUpdateOperationsInput | string | null
    isDone?: NullableBoolFieldUpdateOperationsInput | boolean | null
    target?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    notifyBeforeDays?: NullableIntFieldUpdateOperationsInput | number | null
    notifiedMorning?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifiedAfternoon?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifiedEvening?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReminderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    repeat?: NullableStringFieldUpdateOperationsInput | string | null
    isDone?: NullableBoolFieldUpdateOperationsInput | boolean | null
    target?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    notifyBeforeDays?: NullableIntFieldUpdateOperationsInput | number | null
    notifiedMorning?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifiedAfternoon?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifiedEvening?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReminderCreateManyInput = {
    title: string
    details?: string | null
    dueDate: Date | string
    repeat?: string | null
    isDone?: boolean | null
    target?: string | null
    type?: string | null
    notifyBeforeDays?: number | null
    notifiedMorning?: boolean | null
    notifiedAfternoon?: boolean | null
    notifiedEvening?: boolean | null
    createdAt?: Date | string | null
  }

  export type ReminderUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    repeat?: NullableStringFieldUpdateOperationsInput | string | null
    isDone?: NullableBoolFieldUpdateOperationsInput | boolean | null
    target?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    notifyBeforeDays?: NullableIntFieldUpdateOperationsInput | number | null
    notifiedMorning?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifiedAfternoon?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifiedEvening?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReminderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    repeat?: NullableStringFieldUpdateOperationsInput | string | null
    isDone?: NullableBoolFieldUpdateOperationsInput | boolean | null
    target?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    notifyBeforeDays?: NullableIntFieldUpdateOperationsInput | number | null
    notifiedMorning?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifiedAfternoon?: NullableBoolFieldUpdateOperationsInput | boolean | null
    notifiedEvening?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PasswordStoreCreateInput = {
    label: string
    username: string
    password: string
    notes?: string | null
    createdAt?: Date | string | null
    user: UserCreateNestedOneWithoutPasswordStoreInput
  }

  export type PasswordStoreUncheckedCreateInput = {
    id?: number
    userId: number
    label: string
    username: string
    password: string
    notes?: string | null
    createdAt?: Date | string | null
  }

  export type PasswordStoreUpdateInput = {
    label?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutPasswordStoreNestedInput
  }

  export type PasswordStoreUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PasswordStoreCreateManyInput = {
    userId: number
    label: string
    username: string
    password: string
    notes?: string | null
    createdAt?: Date | string | null
  }

  export type PasswordStoreUpdateManyMutationInput = {
    label?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PasswordStoreUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AdminLogCreateInput = {
    action: string
    timestamp?: Date | string | null
    details?: string | null
    admin: UserCreateNestedOneWithoutAdminLogsInput
  }

  export type AdminLogUncheckedCreateInput = {
    id?: number
    adminId: number
    action: string
    timestamp?: Date | string | null
    details?: string | null
  }

  export type AdminLogUpdateInput = {
    action?: StringFieldUpdateOperationsInput | string
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: UserUpdateOneRequiredWithoutAdminLogsNestedInput
  }

  export type AdminLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    adminId?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdminLogCreateManyInput = {
    adminId: number
    action: string
    timestamp?: Date | string | null
    details?: string | null
  }

  export type AdminLogUpdateManyMutationInput = {
    action?: StringFieldUpdateOperationsInput | string
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdminLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    adminId?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExplanationCreateInput = {
    date: Date | string
    explanation: string
    status?: string
    createdAt?: Date | string
    employee: UserCreateNestedOneWithoutExplanationsInput
  }

  export type ExplanationUncheckedCreateInput = {
    id?: number
    date: Date | string
    explanation: string
    status?: string
    employeeId: number
    createdAt?: Date | string
  }

  export type ExplanationUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    explanation?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: UserUpdateOneRequiredWithoutExplanationsNestedInput
  }

  export type ExplanationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    explanation?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    employeeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExplanationCreateManyInput = {
    date: Date | string
    explanation: string
    status?: string
    employeeId: number
    createdAt?: Date | string
  }

  export type ExplanationUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    explanation?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExplanationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    explanation?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    employeeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type ExplanationListRelationFilter = {
    every?: ExplanationWhereInput
    some?: ExplanationWhereInput
    none?: ExplanationWhereInput
  }

  export type WorkRecordListRelationFilter = {
    every?: WorkRecordWhereInput
    some?: WorkRecordWhereInput
    none?: WorkRecordWhereInput
  }

  export type OTRequestListRelationFilter = {
    every?: OTRequestWhereInput
    some?: OTRequestWhereInput
    none?: OTRequestWhereInput
  }

  export type AdminLogListRelationFilter = {
    every?: AdminLogWhereInput
    some?: AdminLogWhereInput
    none?: AdminLogWhereInput
  }

  export type PasswordStoreListRelationFilter = {
    every?: PasswordStoreWhereInput
    some?: PasswordStoreWhereInput
    none?: PasswordStoreWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ExplanationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OTRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AdminLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PasswordStoreOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    position?: SortOrder
    department?: SortOrder
    company?: SortOrder
    branch?: SortOrder
    phone?: SortOrder
    salary?: SortOrder
    employeeCode?: SortOrder
    employeeType?: SortOrder
    employeeGroup?: SortOrder
    effectiveDate?: SortOrder
    beginDate?: SortOrder
    sso?: SortOrder
    tax?: SortOrder
    payrollRound?: SortOrder
    salaryRound?: SortOrder
    individualSetting?: SortOrder
    createdAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    salary?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    position?: SortOrder
    department?: SortOrder
    company?: SortOrder
    branch?: SortOrder
    phone?: SortOrder
    salary?: SortOrder
    employeeCode?: SortOrder
    employeeType?: SortOrder
    employeeGroup?: SortOrder
    effectiveDate?: SortOrder
    beginDate?: SortOrder
    sso?: SortOrder
    tax?: SortOrder
    payrollRound?: SortOrder
    salaryRound?: SortOrder
    individualSetting?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    position?: SortOrder
    department?: SortOrder
    company?: SortOrder
    branch?: SortOrder
    phone?: SortOrder
    salary?: SortOrder
    employeeCode?: SortOrder
    employeeType?: SortOrder
    employeeGroup?: SortOrder
    effectiveDate?: SortOrder
    beginDate?: SortOrder
    sso?: SortOrder
    tax?: SortOrder
    payrollRound?: SortOrder
    salaryRound?: SortOrder
    individualSetting?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    salary?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type WorkRecordCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    workHours?: SortOrder
    overtime?: SortOrder
    shiftStart?: SortOrder
    shiftEnd?: SortOrder
    status?: SortOrder
    note?: SortOrder
    clockIn?: SortOrder
    clockOut?: SortOrder
  }

  export type WorkRecordAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    workHours?: SortOrder
    overtime?: SortOrder
  }

  export type WorkRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    workHours?: SortOrder
    overtime?: SortOrder
    shiftStart?: SortOrder
    shiftEnd?: SortOrder
    status?: SortOrder
    note?: SortOrder
    clockIn?: SortOrder
    clockOut?: SortOrder
  }

  export type WorkRecordMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    workHours?: SortOrder
    overtime?: SortOrder
    shiftStart?: SortOrder
    shiftEnd?: SortOrder
    status?: SortOrder
    note?: SortOrder
    clockIn?: SortOrder
    clockOut?: SortOrder
  }

  export type WorkRecordSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    workHours?: SortOrder
    overtime?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type OTRequestCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    reason?: SortOrder
    hours?: SortOrder
    approved?: SortOrder
    approverId?: SortOrder
    createdAt?: SortOrder
  }

  export type OTRequestAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    hours?: SortOrder
    approverId?: SortOrder
  }

  export type OTRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    reason?: SortOrder
    hours?: SortOrder
    approved?: SortOrder
    approverId?: SortOrder
    createdAt?: SortOrder
  }

  export type OTRequestMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    reason?: SortOrder
    hours?: SortOrder
    approved?: SortOrder
    approverId?: SortOrder
    createdAt?: SortOrder
  }

  export type OTRequestSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    hours?: SortOrder
    approverId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type ReminderCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    details?: SortOrder
    dueDate?: SortOrder
    repeat?: SortOrder
    isDone?: SortOrder
    target?: SortOrder
    type?: SortOrder
    notifyBeforeDays?: SortOrder
    notifiedMorning?: SortOrder
    notifiedAfternoon?: SortOrder
    notifiedEvening?: SortOrder
    createdAt?: SortOrder
  }

  export type ReminderAvgOrderByAggregateInput = {
    id?: SortOrder
    notifyBeforeDays?: SortOrder
  }

  export type ReminderMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    details?: SortOrder
    dueDate?: SortOrder
    repeat?: SortOrder
    isDone?: SortOrder
    target?: SortOrder
    type?: SortOrder
    notifyBeforeDays?: SortOrder
    notifiedMorning?: SortOrder
    notifiedAfternoon?: SortOrder
    notifiedEvening?: SortOrder
    createdAt?: SortOrder
  }

  export type ReminderMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    details?: SortOrder
    dueDate?: SortOrder
    repeat?: SortOrder
    isDone?: SortOrder
    target?: SortOrder
    type?: SortOrder
    notifyBeforeDays?: SortOrder
    notifiedMorning?: SortOrder
    notifiedAfternoon?: SortOrder
    notifiedEvening?: SortOrder
    createdAt?: SortOrder
  }

  export type ReminderSumOrderByAggregateInput = {
    id?: SortOrder
    notifyBeforeDays?: SortOrder
  }

  export type PasswordStoreCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    label?: SortOrder
    username?: SortOrder
    password?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
  }

  export type PasswordStoreAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type PasswordStoreMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    label?: SortOrder
    username?: SortOrder
    password?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
  }

  export type PasswordStoreMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    label?: SortOrder
    username?: SortOrder
    password?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
  }

  export type PasswordStoreSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type AdminLogCountOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    action?: SortOrder
    timestamp?: SortOrder
    details?: SortOrder
  }

  export type AdminLogAvgOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
  }

  export type AdminLogMaxOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    action?: SortOrder
    timestamp?: SortOrder
    details?: SortOrder
  }

  export type AdminLogMinOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
    action?: SortOrder
    timestamp?: SortOrder
    details?: SortOrder
  }

  export type AdminLogSumOrderByAggregateInput = {
    id?: SortOrder
    adminId?: SortOrder
  }

  export type ExplanationCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    explanation?: SortOrder
    status?: SortOrder
    employeeId?: SortOrder
    createdAt?: SortOrder
  }

  export type ExplanationAvgOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
  }

  export type ExplanationMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    explanation?: SortOrder
    status?: SortOrder
    employeeId?: SortOrder
    createdAt?: SortOrder
  }

  export type ExplanationMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    explanation?: SortOrder
    status?: SortOrder
    employeeId?: SortOrder
    createdAt?: SortOrder
  }

  export type ExplanationSumOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
  }

  export type ExplanationCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<ExplanationCreateWithoutEmployeeInput, ExplanationUncheckedCreateWithoutEmployeeInput> | ExplanationCreateWithoutEmployeeInput[] | ExplanationUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: ExplanationCreateOrConnectWithoutEmployeeInput | ExplanationCreateOrConnectWithoutEmployeeInput[]
    createMany?: ExplanationCreateManyEmployeeInputEnvelope
    connect?: ExplanationWhereUniqueInput | ExplanationWhereUniqueInput[]
  }

  export type WorkRecordCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkRecordCreateWithoutUserInput, WorkRecordUncheckedCreateWithoutUserInput> | WorkRecordCreateWithoutUserInput[] | WorkRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkRecordCreateOrConnectWithoutUserInput | WorkRecordCreateOrConnectWithoutUserInput[]
    createMany?: WorkRecordCreateManyUserInputEnvelope
    connect?: WorkRecordWhereUniqueInput | WorkRecordWhereUniqueInput[]
  }

  export type OTRequestCreateNestedManyWithoutUserInput = {
    create?: XOR<OTRequestCreateWithoutUserInput, OTRequestUncheckedCreateWithoutUserInput> | OTRequestCreateWithoutUserInput[] | OTRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OTRequestCreateOrConnectWithoutUserInput | OTRequestCreateOrConnectWithoutUserInput[]
    createMany?: OTRequestCreateManyUserInputEnvelope
    connect?: OTRequestWhereUniqueInput | OTRequestWhereUniqueInput[]
  }

  export type AdminLogCreateNestedManyWithoutAdminInput = {
    create?: XOR<AdminLogCreateWithoutAdminInput, AdminLogUncheckedCreateWithoutAdminInput> | AdminLogCreateWithoutAdminInput[] | AdminLogUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: AdminLogCreateOrConnectWithoutAdminInput | AdminLogCreateOrConnectWithoutAdminInput[]
    createMany?: AdminLogCreateManyAdminInputEnvelope
    connect?: AdminLogWhereUniqueInput | AdminLogWhereUniqueInput[]
  }

  export type PasswordStoreCreateNestedManyWithoutUserInput = {
    create?: XOR<PasswordStoreCreateWithoutUserInput, PasswordStoreUncheckedCreateWithoutUserInput> | PasswordStoreCreateWithoutUserInput[] | PasswordStoreUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordStoreCreateOrConnectWithoutUserInput | PasswordStoreCreateOrConnectWithoutUserInput[]
    createMany?: PasswordStoreCreateManyUserInputEnvelope
    connect?: PasswordStoreWhereUniqueInput | PasswordStoreWhereUniqueInput[]
  }

  export type ExplanationUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<ExplanationCreateWithoutEmployeeInput, ExplanationUncheckedCreateWithoutEmployeeInput> | ExplanationCreateWithoutEmployeeInput[] | ExplanationUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: ExplanationCreateOrConnectWithoutEmployeeInput | ExplanationCreateOrConnectWithoutEmployeeInput[]
    createMany?: ExplanationCreateManyEmployeeInputEnvelope
    connect?: ExplanationWhereUniqueInput | ExplanationWhereUniqueInput[]
  }

  export type WorkRecordUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkRecordCreateWithoutUserInput, WorkRecordUncheckedCreateWithoutUserInput> | WorkRecordCreateWithoutUserInput[] | WorkRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkRecordCreateOrConnectWithoutUserInput | WorkRecordCreateOrConnectWithoutUserInput[]
    createMany?: WorkRecordCreateManyUserInputEnvelope
    connect?: WorkRecordWhereUniqueInput | WorkRecordWhereUniqueInput[]
  }

  export type OTRequestUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OTRequestCreateWithoutUserInput, OTRequestUncheckedCreateWithoutUserInput> | OTRequestCreateWithoutUserInput[] | OTRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OTRequestCreateOrConnectWithoutUserInput | OTRequestCreateOrConnectWithoutUserInput[]
    createMany?: OTRequestCreateManyUserInputEnvelope
    connect?: OTRequestWhereUniqueInput | OTRequestWhereUniqueInput[]
  }

  export type AdminLogUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<AdminLogCreateWithoutAdminInput, AdminLogUncheckedCreateWithoutAdminInput> | AdminLogCreateWithoutAdminInput[] | AdminLogUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: AdminLogCreateOrConnectWithoutAdminInput | AdminLogCreateOrConnectWithoutAdminInput[]
    createMany?: AdminLogCreateManyAdminInputEnvelope
    connect?: AdminLogWhereUniqueInput | AdminLogWhereUniqueInput[]
  }

  export type PasswordStoreUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PasswordStoreCreateWithoutUserInput, PasswordStoreUncheckedCreateWithoutUserInput> | PasswordStoreCreateWithoutUserInput[] | PasswordStoreUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordStoreCreateOrConnectWithoutUserInput | PasswordStoreCreateOrConnectWithoutUserInput[]
    createMany?: PasswordStoreCreateManyUserInputEnvelope
    connect?: PasswordStoreWhereUniqueInput | PasswordStoreWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type ExplanationUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<ExplanationCreateWithoutEmployeeInput, ExplanationUncheckedCreateWithoutEmployeeInput> | ExplanationCreateWithoutEmployeeInput[] | ExplanationUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: ExplanationCreateOrConnectWithoutEmployeeInput | ExplanationCreateOrConnectWithoutEmployeeInput[]
    upsert?: ExplanationUpsertWithWhereUniqueWithoutEmployeeInput | ExplanationUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: ExplanationCreateManyEmployeeInputEnvelope
    set?: ExplanationWhereUniqueInput | ExplanationWhereUniqueInput[]
    disconnect?: ExplanationWhereUniqueInput | ExplanationWhereUniqueInput[]
    delete?: ExplanationWhereUniqueInput | ExplanationWhereUniqueInput[]
    connect?: ExplanationWhereUniqueInput | ExplanationWhereUniqueInput[]
    update?: ExplanationUpdateWithWhereUniqueWithoutEmployeeInput | ExplanationUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: ExplanationUpdateManyWithWhereWithoutEmployeeInput | ExplanationUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: ExplanationScalarWhereInput | ExplanationScalarWhereInput[]
  }

  export type WorkRecordUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkRecordCreateWithoutUserInput, WorkRecordUncheckedCreateWithoutUserInput> | WorkRecordCreateWithoutUserInput[] | WorkRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkRecordCreateOrConnectWithoutUserInput | WorkRecordCreateOrConnectWithoutUserInput[]
    upsert?: WorkRecordUpsertWithWhereUniqueWithoutUserInput | WorkRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkRecordCreateManyUserInputEnvelope
    set?: WorkRecordWhereUniqueInput | WorkRecordWhereUniqueInput[]
    disconnect?: WorkRecordWhereUniqueInput | WorkRecordWhereUniqueInput[]
    delete?: WorkRecordWhereUniqueInput | WorkRecordWhereUniqueInput[]
    connect?: WorkRecordWhereUniqueInput | WorkRecordWhereUniqueInput[]
    update?: WorkRecordUpdateWithWhereUniqueWithoutUserInput | WorkRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkRecordUpdateManyWithWhereWithoutUserInput | WorkRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkRecordScalarWhereInput | WorkRecordScalarWhereInput[]
  }

  export type OTRequestUpdateManyWithoutUserNestedInput = {
    create?: XOR<OTRequestCreateWithoutUserInput, OTRequestUncheckedCreateWithoutUserInput> | OTRequestCreateWithoutUserInput[] | OTRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OTRequestCreateOrConnectWithoutUserInput | OTRequestCreateOrConnectWithoutUserInput[]
    upsert?: OTRequestUpsertWithWhereUniqueWithoutUserInput | OTRequestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OTRequestCreateManyUserInputEnvelope
    set?: OTRequestWhereUniqueInput | OTRequestWhereUniqueInput[]
    disconnect?: OTRequestWhereUniqueInput | OTRequestWhereUniqueInput[]
    delete?: OTRequestWhereUniqueInput | OTRequestWhereUniqueInput[]
    connect?: OTRequestWhereUniqueInput | OTRequestWhereUniqueInput[]
    update?: OTRequestUpdateWithWhereUniqueWithoutUserInput | OTRequestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OTRequestUpdateManyWithWhereWithoutUserInput | OTRequestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OTRequestScalarWhereInput | OTRequestScalarWhereInput[]
  }

  export type AdminLogUpdateManyWithoutAdminNestedInput = {
    create?: XOR<AdminLogCreateWithoutAdminInput, AdminLogUncheckedCreateWithoutAdminInput> | AdminLogCreateWithoutAdminInput[] | AdminLogUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: AdminLogCreateOrConnectWithoutAdminInput | AdminLogCreateOrConnectWithoutAdminInput[]
    upsert?: AdminLogUpsertWithWhereUniqueWithoutAdminInput | AdminLogUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: AdminLogCreateManyAdminInputEnvelope
    set?: AdminLogWhereUniqueInput | AdminLogWhereUniqueInput[]
    disconnect?: AdminLogWhereUniqueInput | AdminLogWhereUniqueInput[]
    delete?: AdminLogWhereUniqueInput | AdminLogWhereUniqueInput[]
    connect?: AdminLogWhereUniqueInput | AdminLogWhereUniqueInput[]
    update?: AdminLogUpdateWithWhereUniqueWithoutAdminInput | AdminLogUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: AdminLogUpdateManyWithWhereWithoutAdminInput | AdminLogUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: AdminLogScalarWhereInput | AdminLogScalarWhereInput[]
  }

  export type PasswordStoreUpdateManyWithoutUserNestedInput = {
    create?: XOR<PasswordStoreCreateWithoutUserInput, PasswordStoreUncheckedCreateWithoutUserInput> | PasswordStoreCreateWithoutUserInput[] | PasswordStoreUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordStoreCreateOrConnectWithoutUserInput | PasswordStoreCreateOrConnectWithoutUserInput[]
    upsert?: PasswordStoreUpsertWithWhereUniqueWithoutUserInput | PasswordStoreUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PasswordStoreCreateManyUserInputEnvelope
    set?: PasswordStoreWhereUniqueInput | PasswordStoreWhereUniqueInput[]
    disconnect?: PasswordStoreWhereUniqueInput | PasswordStoreWhereUniqueInput[]
    delete?: PasswordStoreWhereUniqueInput | PasswordStoreWhereUniqueInput[]
    connect?: PasswordStoreWhereUniqueInput | PasswordStoreWhereUniqueInput[]
    update?: PasswordStoreUpdateWithWhereUniqueWithoutUserInput | PasswordStoreUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PasswordStoreUpdateManyWithWhereWithoutUserInput | PasswordStoreUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PasswordStoreScalarWhereInput | PasswordStoreScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ExplanationUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<ExplanationCreateWithoutEmployeeInput, ExplanationUncheckedCreateWithoutEmployeeInput> | ExplanationCreateWithoutEmployeeInput[] | ExplanationUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: ExplanationCreateOrConnectWithoutEmployeeInput | ExplanationCreateOrConnectWithoutEmployeeInput[]
    upsert?: ExplanationUpsertWithWhereUniqueWithoutEmployeeInput | ExplanationUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: ExplanationCreateManyEmployeeInputEnvelope
    set?: ExplanationWhereUniqueInput | ExplanationWhereUniqueInput[]
    disconnect?: ExplanationWhereUniqueInput | ExplanationWhereUniqueInput[]
    delete?: ExplanationWhereUniqueInput | ExplanationWhereUniqueInput[]
    connect?: ExplanationWhereUniqueInput | ExplanationWhereUniqueInput[]
    update?: ExplanationUpdateWithWhereUniqueWithoutEmployeeInput | ExplanationUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: ExplanationUpdateManyWithWhereWithoutEmployeeInput | ExplanationUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: ExplanationScalarWhereInput | ExplanationScalarWhereInput[]
  }

  export type WorkRecordUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkRecordCreateWithoutUserInput, WorkRecordUncheckedCreateWithoutUserInput> | WorkRecordCreateWithoutUserInput[] | WorkRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkRecordCreateOrConnectWithoutUserInput | WorkRecordCreateOrConnectWithoutUserInput[]
    upsert?: WorkRecordUpsertWithWhereUniqueWithoutUserInput | WorkRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkRecordCreateManyUserInputEnvelope
    set?: WorkRecordWhereUniqueInput | WorkRecordWhereUniqueInput[]
    disconnect?: WorkRecordWhereUniqueInput | WorkRecordWhereUniqueInput[]
    delete?: WorkRecordWhereUniqueInput | WorkRecordWhereUniqueInput[]
    connect?: WorkRecordWhereUniqueInput | WorkRecordWhereUniqueInput[]
    update?: WorkRecordUpdateWithWhereUniqueWithoutUserInput | WorkRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkRecordUpdateManyWithWhereWithoutUserInput | WorkRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkRecordScalarWhereInput | WorkRecordScalarWhereInput[]
  }

  export type OTRequestUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OTRequestCreateWithoutUserInput, OTRequestUncheckedCreateWithoutUserInput> | OTRequestCreateWithoutUserInput[] | OTRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OTRequestCreateOrConnectWithoutUserInput | OTRequestCreateOrConnectWithoutUserInput[]
    upsert?: OTRequestUpsertWithWhereUniqueWithoutUserInput | OTRequestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OTRequestCreateManyUserInputEnvelope
    set?: OTRequestWhereUniqueInput | OTRequestWhereUniqueInput[]
    disconnect?: OTRequestWhereUniqueInput | OTRequestWhereUniqueInput[]
    delete?: OTRequestWhereUniqueInput | OTRequestWhereUniqueInput[]
    connect?: OTRequestWhereUniqueInput | OTRequestWhereUniqueInput[]
    update?: OTRequestUpdateWithWhereUniqueWithoutUserInput | OTRequestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OTRequestUpdateManyWithWhereWithoutUserInput | OTRequestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OTRequestScalarWhereInput | OTRequestScalarWhereInput[]
  }

  export type AdminLogUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<AdminLogCreateWithoutAdminInput, AdminLogUncheckedCreateWithoutAdminInput> | AdminLogCreateWithoutAdminInput[] | AdminLogUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: AdminLogCreateOrConnectWithoutAdminInput | AdminLogCreateOrConnectWithoutAdminInput[]
    upsert?: AdminLogUpsertWithWhereUniqueWithoutAdminInput | AdminLogUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: AdminLogCreateManyAdminInputEnvelope
    set?: AdminLogWhereUniqueInput | AdminLogWhereUniqueInput[]
    disconnect?: AdminLogWhereUniqueInput | AdminLogWhereUniqueInput[]
    delete?: AdminLogWhereUniqueInput | AdminLogWhereUniqueInput[]
    connect?: AdminLogWhereUniqueInput | AdminLogWhereUniqueInput[]
    update?: AdminLogUpdateWithWhereUniqueWithoutAdminInput | AdminLogUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: AdminLogUpdateManyWithWhereWithoutAdminInput | AdminLogUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: AdminLogScalarWhereInput | AdminLogScalarWhereInput[]
  }

  export type PasswordStoreUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PasswordStoreCreateWithoutUserInput, PasswordStoreUncheckedCreateWithoutUserInput> | PasswordStoreCreateWithoutUserInput[] | PasswordStoreUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordStoreCreateOrConnectWithoutUserInput | PasswordStoreCreateOrConnectWithoutUserInput[]
    upsert?: PasswordStoreUpsertWithWhereUniqueWithoutUserInput | PasswordStoreUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PasswordStoreCreateManyUserInputEnvelope
    set?: PasswordStoreWhereUniqueInput | PasswordStoreWhereUniqueInput[]
    disconnect?: PasswordStoreWhereUniqueInput | PasswordStoreWhereUniqueInput[]
    delete?: PasswordStoreWhereUniqueInput | PasswordStoreWhereUniqueInput[]
    connect?: PasswordStoreWhereUniqueInput | PasswordStoreWhereUniqueInput[]
    update?: PasswordStoreUpdateWithWhereUniqueWithoutUserInput | PasswordStoreUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PasswordStoreUpdateManyWithWhereWithoutUserInput | PasswordStoreUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PasswordStoreScalarWhereInput | PasswordStoreScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutWorkRecordsInput = {
    create?: XOR<UserCreateWithoutWorkRecordsInput, UserUncheckedCreateWithoutWorkRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkRecordsInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutWorkRecordsNestedInput = {
    create?: XOR<UserCreateWithoutWorkRecordsInput, UserUncheckedCreateWithoutWorkRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkRecordsInput
    upsert?: UserUpsertWithoutWorkRecordsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWorkRecordsInput, UserUpdateWithoutWorkRecordsInput>, UserUncheckedUpdateWithoutWorkRecordsInput>
  }

  export type UserCreateNestedOneWithoutOtRequestsInput = {
    create?: XOR<UserCreateWithoutOtRequestsInput, UserUncheckedCreateWithoutOtRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOtRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutOtRequestsNestedInput = {
    create?: XOR<UserCreateWithoutOtRequestsInput, UserUncheckedCreateWithoutOtRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOtRequestsInput
    upsert?: UserUpsertWithoutOtRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOtRequestsInput, UserUpdateWithoutOtRequestsInput>, UserUncheckedUpdateWithoutOtRequestsInput>
  }

  export type UserCreateNestedOneWithoutPasswordStoreInput = {
    create?: XOR<UserCreateWithoutPasswordStoreInput, UserUncheckedCreateWithoutPasswordStoreInput>
    connectOrCreate?: UserCreateOrConnectWithoutPasswordStoreInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPasswordStoreNestedInput = {
    create?: XOR<UserCreateWithoutPasswordStoreInput, UserUncheckedCreateWithoutPasswordStoreInput>
    connectOrCreate?: UserCreateOrConnectWithoutPasswordStoreInput
    upsert?: UserUpsertWithoutPasswordStoreInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPasswordStoreInput, UserUpdateWithoutPasswordStoreInput>, UserUncheckedUpdateWithoutPasswordStoreInput>
  }

  export type UserCreateNestedOneWithoutAdminLogsInput = {
    create?: XOR<UserCreateWithoutAdminLogsInput, UserUncheckedCreateWithoutAdminLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAdminLogsNestedInput = {
    create?: XOR<UserCreateWithoutAdminLogsInput, UserUncheckedCreateWithoutAdminLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminLogsInput
    upsert?: UserUpsertWithoutAdminLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAdminLogsInput, UserUpdateWithoutAdminLogsInput>, UserUncheckedUpdateWithoutAdminLogsInput>
  }

  export type UserCreateNestedOneWithoutExplanationsInput = {
    create?: XOR<UserCreateWithoutExplanationsInput, UserUncheckedCreateWithoutExplanationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutExplanationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutExplanationsNestedInput = {
    create?: XOR<UserCreateWithoutExplanationsInput, UserUncheckedCreateWithoutExplanationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutExplanationsInput
    upsert?: UserUpsertWithoutExplanationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutExplanationsInput, UserUpdateWithoutExplanationsInput>, UserUncheckedUpdateWithoutExplanationsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type ExplanationCreateWithoutEmployeeInput = {
    date: Date | string
    explanation: string
    status?: string
    createdAt?: Date | string
  }

  export type ExplanationUncheckedCreateWithoutEmployeeInput = {
    id?: number
    date: Date | string
    explanation: string
    status?: string
    createdAt?: Date | string
  }

  export type ExplanationCreateOrConnectWithoutEmployeeInput = {
    where: ExplanationWhereUniqueInput
    create: XOR<ExplanationCreateWithoutEmployeeInput, ExplanationUncheckedCreateWithoutEmployeeInput>
  }

  export type ExplanationCreateManyEmployeeInputEnvelope = {
    data: ExplanationCreateManyEmployeeInput | ExplanationCreateManyEmployeeInput[]
  }

  export type WorkRecordCreateWithoutUserInput = {
    date: Date | string
    workHours?: number | null
    overtime?: number | null
    shiftStart?: string | null
    shiftEnd?: string | null
    status?: string | null
    note?: string | null
    clockIn?: Date | string | null
    clockOut?: Date | string | null
  }

  export type WorkRecordUncheckedCreateWithoutUserInput = {
    id?: number
    date: Date | string
    workHours?: number | null
    overtime?: number | null
    shiftStart?: string | null
    shiftEnd?: string | null
    status?: string | null
    note?: string | null
    clockIn?: Date | string | null
    clockOut?: Date | string | null
  }

  export type WorkRecordCreateOrConnectWithoutUserInput = {
    where: WorkRecordWhereUniqueInput
    create: XOR<WorkRecordCreateWithoutUserInput, WorkRecordUncheckedCreateWithoutUserInput>
  }

  export type WorkRecordCreateManyUserInputEnvelope = {
    data: WorkRecordCreateManyUserInput | WorkRecordCreateManyUserInput[]
  }

  export type OTRequestCreateWithoutUserInput = {
    date: Date | string
    reason: string
    hours: number
    approved?: boolean | null
    approverId?: number | null
    createdAt?: Date | string | null
  }

  export type OTRequestUncheckedCreateWithoutUserInput = {
    id?: number
    date: Date | string
    reason: string
    hours: number
    approved?: boolean | null
    approverId?: number | null
    createdAt?: Date | string | null
  }

  export type OTRequestCreateOrConnectWithoutUserInput = {
    where: OTRequestWhereUniqueInput
    create: XOR<OTRequestCreateWithoutUserInput, OTRequestUncheckedCreateWithoutUserInput>
  }

  export type OTRequestCreateManyUserInputEnvelope = {
    data: OTRequestCreateManyUserInput | OTRequestCreateManyUserInput[]
  }

  export type AdminLogCreateWithoutAdminInput = {
    action: string
    timestamp?: Date | string | null
    details?: string | null
  }

  export type AdminLogUncheckedCreateWithoutAdminInput = {
    id?: number
    action: string
    timestamp?: Date | string | null
    details?: string | null
  }

  export type AdminLogCreateOrConnectWithoutAdminInput = {
    where: AdminLogWhereUniqueInput
    create: XOR<AdminLogCreateWithoutAdminInput, AdminLogUncheckedCreateWithoutAdminInput>
  }

  export type AdminLogCreateManyAdminInputEnvelope = {
    data: AdminLogCreateManyAdminInput | AdminLogCreateManyAdminInput[]
  }

  export type PasswordStoreCreateWithoutUserInput = {
    label: string
    username: string
    password: string
    notes?: string | null
    createdAt?: Date | string | null
  }

  export type PasswordStoreUncheckedCreateWithoutUserInput = {
    id?: number
    label: string
    username: string
    password: string
    notes?: string | null
    createdAt?: Date | string | null
  }

  export type PasswordStoreCreateOrConnectWithoutUserInput = {
    where: PasswordStoreWhereUniqueInput
    create: XOR<PasswordStoreCreateWithoutUserInput, PasswordStoreUncheckedCreateWithoutUserInput>
  }

  export type PasswordStoreCreateManyUserInputEnvelope = {
    data: PasswordStoreCreateManyUserInput | PasswordStoreCreateManyUserInput[]
  }

  export type ExplanationUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: ExplanationWhereUniqueInput
    update: XOR<ExplanationUpdateWithoutEmployeeInput, ExplanationUncheckedUpdateWithoutEmployeeInput>
    create: XOR<ExplanationCreateWithoutEmployeeInput, ExplanationUncheckedCreateWithoutEmployeeInput>
  }

  export type ExplanationUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: ExplanationWhereUniqueInput
    data: XOR<ExplanationUpdateWithoutEmployeeInput, ExplanationUncheckedUpdateWithoutEmployeeInput>
  }

  export type ExplanationUpdateManyWithWhereWithoutEmployeeInput = {
    where: ExplanationScalarWhereInput
    data: XOR<ExplanationUpdateManyMutationInput, ExplanationUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type ExplanationScalarWhereInput = {
    AND?: ExplanationScalarWhereInput | ExplanationScalarWhereInput[]
    OR?: ExplanationScalarWhereInput[]
    NOT?: ExplanationScalarWhereInput | ExplanationScalarWhereInput[]
    id?: IntFilter<"Explanation"> | number
    date?: DateTimeFilter<"Explanation"> | Date | string
    explanation?: StringFilter<"Explanation"> | string
    status?: StringFilter<"Explanation"> | string
    employeeId?: IntFilter<"Explanation"> | number
    createdAt?: DateTimeFilter<"Explanation"> | Date | string
  }

  export type WorkRecordUpsertWithWhereUniqueWithoutUserInput = {
    where: WorkRecordWhereUniqueInput
    update: XOR<WorkRecordUpdateWithoutUserInput, WorkRecordUncheckedUpdateWithoutUserInput>
    create: XOR<WorkRecordCreateWithoutUserInput, WorkRecordUncheckedCreateWithoutUserInput>
  }

  export type WorkRecordUpdateWithWhereUniqueWithoutUserInput = {
    where: WorkRecordWhereUniqueInput
    data: XOR<WorkRecordUpdateWithoutUserInput, WorkRecordUncheckedUpdateWithoutUserInput>
  }

  export type WorkRecordUpdateManyWithWhereWithoutUserInput = {
    where: WorkRecordScalarWhereInput
    data: XOR<WorkRecordUpdateManyMutationInput, WorkRecordUncheckedUpdateManyWithoutUserInput>
  }

  export type WorkRecordScalarWhereInput = {
    AND?: WorkRecordScalarWhereInput | WorkRecordScalarWhereInput[]
    OR?: WorkRecordScalarWhereInput[]
    NOT?: WorkRecordScalarWhereInput | WorkRecordScalarWhereInput[]
    id?: IntFilter<"WorkRecord"> | number
    userId?: IntFilter<"WorkRecord"> | number
    date?: DateTimeFilter<"WorkRecord"> | Date | string
    workHours?: FloatNullableFilter<"WorkRecord"> | number | null
    overtime?: FloatNullableFilter<"WorkRecord"> | number | null
    shiftStart?: StringNullableFilter<"WorkRecord"> | string | null
    shiftEnd?: StringNullableFilter<"WorkRecord"> | string | null
    status?: StringNullableFilter<"WorkRecord"> | string | null
    note?: StringNullableFilter<"WorkRecord"> | string | null
    clockIn?: DateTimeNullableFilter<"WorkRecord"> | Date | string | null
    clockOut?: DateTimeNullableFilter<"WorkRecord"> | Date | string | null
  }

  export type OTRequestUpsertWithWhereUniqueWithoutUserInput = {
    where: OTRequestWhereUniqueInput
    update: XOR<OTRequestUpdateWithoutUserInput, OTRequestUncheckedUpdateWithoutUserInput>
    create: XOR<OTRequestCreateWithoutUserInput, OTRequestUncheckedCreateWithoutUserInput>
  }

  export type OTRequestUpdateWithWhereUniqueWithoutUserInput = {
    where: OTRequestWhereUniqueInput
    data: XOR<OTRequestUpdateWithoutUserInput, OTRequestUncheckedUpdateWithoutUserInput>
  }

  export type OTRequestUpdateManyWithWhereWithoutUserInput = {
    where: OTRequestScalarWhereInput
    data: XOR<OTRequestUpdateManyMutationInput, OTRequestUncheckedUpdateManyWithoutUserInput>
  }

  export type OTRequestScalarWhereInput = {
    AND?: OTRequestScalarWhereInput | OTRequestScalarWhereInput[]
    OR?: OTRequestScalarWhereInput[]
    NOT?: OTRequestScalarWhereInput | OTRequestScalarWhereInput[]
    id?: IntFilter<"OTRequest"> | number
    userId?: IntFilter<"OTRequest"> | number
    date?: DateTimeFilter<"OTRequest"> | Date | string
    reason?: StringFilter<"OTRequest"> | string
    hours?: FloatFilter<"OTRequest"> | number
    approved?: BoolNullableFilter<"OTRequest"> | boolean | null
    approverId?: IntNullableFilter<"OTRequest"> | number | null
    createdAt?: DateTimeNullableFilter<"OTRequest"> | Date | string | null
  }

  export type AdminLogUpsertWithWhereUniqueWithoutAdminInput = {
    where: AdminLogWhereUniqueInput
    update: XOR<AdminLogUpdateWithoutAdminInput, AdminLogUncheckedUpdateWithoutAdminInput>
    create: XOR<AdminLogCreateWithoutAdminInput, AdminLogUncheckedCreateWithoutAdminInput>
  }

  export type AdminLogUpdateWithWhereUniqueWithoutAdminInput = {
    where: AdminLogWhereUniqueInput
    data: XOR<AdminLogUpdateWithoutAdminInput, AdminLogUncheckedUpdateWithoutAdminInput>
  }

  export type AdminLogUpdateManyWithWhereWithoutAdminInput = {
    where: AdminLogScalarWhereInput
    data: XOR<AdminLogUpdateManyMutationInput, AdminLogUncheckedUpdateManyWithoutAdminInput>
  }

  export type AdminLogScalarWhereInput = {
    AND?: AdminLogScalarWhereInput | AdminLogScalarWhereInput[]
    OR?: AdminLogScalarWhereInput[]
    NOT?: AdminLogScalarWhereInput | AdminLogScalarWhereInput[]
    id?: IntFilter<"AdminLog"> | number
    adminId?: IntFilter<"AdminLog"> | number
    action?: StringFilter<"AdminLog"> | string
    timestamp?: DateTimeNullableFilter<"AdminLog"> | Date | string | null
    details?: StringNullableFilter<"AdminLog"> | string | null
  }

  export type PasswordStoreUpsertWithWhereUniqueWithoutUserInput = {
    where: PasswordStoreWhereUniqueInput
    update: XOR<PasswordStoreUpdateWithoutUserInput, PasswordStoreUncheckedUpdateWithoutUserInput>
    create: XOR<PasswordStoreCreateWithoutUserInput, PasswordStoreUncheckedCreateWithoutUserInput>
  }

  export type PasswordStoreUpdateWithWhereUniqueWithoutUserInput = {
    where: PasswordStoreWhereUniqueInput
    data: XOR<PasswordStoreUpdateWithoutUserInput, PasswordStoreUncheckedUpdateWithoutUserInput>
  }

  export type PasswordStoreUpdateManyWithWhereWithoutUserInput = {
    where: PasswordStoreScalarWhereInput
    data: XOR<PasswordStoreUpdateManyMutationInput, PasswordStoreUncheckedUpdateManyWithoutUserInput>
  }

  export type PasswordStoreScalarWhereInput = {
    AND?: PasswordStoreScalarWhereInput | PasswordStoreScalarWhereInput[]
    OR?: PasswordStoreScalarWhereInput[]
    NOT?: PasswordStoreScalarWhereInput | PasswordStoreScalarWhereInput[]
    id?: IntFilter<"PasswordStore"> | number
    userId?: IntFilter<"PasswordStore"> | number
    label?: StringFilter<"PasswordStore"> | string
    username?: StringFilter<"PasswordStore"> | string
    password?: StringFilter<"PasswordStore"> | string
    notes?: StringNullableFilter<"PasswordStore"> | string | null
    createdAt?: DateTimeNullableFilter<"PasswordStore"> | Date | string | null
  }

  export type UserCreateWithoutWorkRecordsInput = {
    username: string
    password: string
    role?: string
    fullName: string
    email: string
    position?: string | null
    department?: string | null
    company?: string | null
    branch?: string | null
    phone?: string | null
    salary?: number | null
    employeeCode?: string | null
    employeeType?: string | null
    employeeGroup?: string | null
    effectiveDate?: Date | string | null
    beginDate?: Date | string | null
    sso?: boolean | null
    tax?: boolean | null
    payrollRound?: string | null
    salaryRound?: string | null
    individualSetting?: string | null
    createdAt?: Date | string | null
    explanations?: ExplanationCreateNestedManyWithoutEmployeeInput
    otRequests?: OTRequestCreateNestedManyWithoutUserInput
    adminLogs?: AdminLogCreateNestedManyWithoutAdminInput
    passwordStore?: PasswordStoreCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWorkRecordsInput = {
    id?: number
    username: string
    password: string
    role?: string
    fullName: string
    email: string
    position?: string | null
    department?: string | null
    company?: string | null
    branch?: string | null
    phone?: string | null
    salary?: number | null
    employeeCode?: string | null
    employeeType?: string | null
    employeeGroup?: string | null
    effectiveDate?: Date | string | null
    beginDate?: Date | string | null
    sso?: boolean | null
    tax?: boolean | null
    payrollRound?: string | null
    salaryRound?: string | null
    individualSetting?: string | null
    createdAt?: Date | string | null
    explanations?: ExplanationUncheckedCreateNestedManyWithoutEmployeeInput
    otRequests?: OTRequestUncheckedCreateNestedManyWithoutUserInput
    adminLogs?: AdminLogUncheckedCreateNestedManyWithoutAdminInput
    passwordStore?: PasswordStoreUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWorkRecordsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWorkRecordsInput, UserUncheckedCreateWithoutWorkRecordsInput>
  }

  export type UserUpsertWithoutWorkRecordsInput = {
    update: XOR<UserUpdateWithoutWorkRecordsInput, UserUncheckedUpdateWithoutWorkRecordsInput>
    create: XOR<UserCreateWithoutWorkRecordsInput, UserUncheckedCreateWithoutWorkRecordsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWorkRecordsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWorkRecordsInput, UserUncheckedUpdateWithoutWorkRecordsInput>
  }

  export type UserUpdateWithoutWorkRecordsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    employeeType?: NullableStringFieldUpdateOperationsInput | string | null
    employeeGroup?: NullableStringFieldUpdateOperationsInput | string | null
    effectiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    beginDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sso?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tax?: NullableBoolFieldUpdateOperationsInput | boolean | null
    payrollRound?: NullableStringFieldUpdateOperationsInput | string | null
    salaryRound?: NullableStringFieldUpdateOperationsInput | string | null
    individualSetting?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    explanations?: ExplanationUpdateManyWithoutEmployeeNestedInput
    otRequests?: OTRequestUpdateManyWithoutUserNestedInput
    adminLogs?: AdminLogUpdateManyWithoutAdminNestedInput
    passwordStore?: PasswordStoreUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWorkRecordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    employeeType?: NullableStringFieldUpdateOperationsInput | string | null
    employeeGroup?: NullableStringFieldUpdateOperationsInput | string | null
    effectiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    beginDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sso?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tax?: NullableBoolFieldUpdateOperationsInput | boolean | null
    payrollRound?: NullableStringFieldUpdateOperationsInput | string | null
    salaryRound?: NullableStringFieldUpdateOperationsInput | string | null
    individualSetting?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    explanations?: ExplanationUncheckedUpdateManyWithoutEmployeeNestedInput
    otRequests?: OTRequestUncheckedUpdateManyWithoutUserNestedInput
    adminLogs?: AdminLogUncheckedUpdateManyWithoutAdminNestedInput
    passwordStore?: PasswordStoreUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutOtRequestsInput = {
    username: string
    password: string
    role?: string
    fullName: string
    email: string
    position?: string | null
    department?: string | null
    company?: string | null
    branch?: string | null
    phone?: string | null
    salary?: number | null
    employeeCode?: string | null
    employeeType?: string | null
    employeeGroup?: string | null
    effectiveDate?: Date | string | null
    beginDate?: Date | string | null
    sso?: boolean | null
    tax?: boolean | null
    payrollRound?: string | null
    salaryRound?: string | null
    individualSetting?: string | null
    createdAt?: Date | string | null
    explanations?: ExplanationCreateNestedManyWithoutEmployeeInput
    workRecords?: WorkRecordCreateNestedManyWithoutUserInput
    adminLogs?: AdminLogCreateNestedManyWithoutAdminInput
    passwordStore?: PasswordStoreCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOtRequestsInput = {
    id?: number
    username: string
    password: string
    role?: string
    fullName: string
    email: string
    position?: string | null
    department?: string | null
    company?: string | null
    branch?: string | null
    phone?: string | null
    salary?: number | null
    employeeCode?: string | null
    employeeType?: string | null
    employeeGroup?: string | null
    effectiveDate?: Date | string | null
    beginDate?: Date | string | null
    sso?: boolean | null
    tax?: boolean | null
    payrollRound?: string | null
    salaryRound?: string | null
    individualSetting?: string | null
    createdAt?: Date | string | null
    explanations?: ExplanationUncheckedCreateNestedManyWithoutEmployeeInput
    workRecords?: WorkRecordUncheckedCreateNestedManyWithoutUserInput
    adminLogs?: AdminLogUncheckedCreateNestedManyWithoutAdminInput
    passwordStore?: PasswordStoreUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOtRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOtRequestsInput, UserUncheckedCreateWithoutOtRequestsInput>
  }

  export type UserUpsertWithoutOtRequestsInput = {
    update: XOR<UserUpdateWithoutOtRequestsInput, UserUncheckedUpdateWithoutOtRequestsInput>
    create: XOR<UserCreateWithoutOtRequestsInput, UserUncheckedCreateWithoutOtRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOtRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOtRequestsInput, UserUncheckedUpdateWithoutOtRequestsInput>
  }

  export type UserUpdateWithoutOtRequestsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    employeeType?: NullableStringFieldUpdateOperationsInput | string | null
    employeeGroup?: NullableStringFieldUpdateOperationsInput | string | null
    effectiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    beginDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sso?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tax?: NullableBoolFieldUpdateOperationsInput | boolean | null
    payrollRound?: NullableStringFieldUpdateOperationsInput | string | null
    salaryRound?: NullableStringFieldUpdateOperationsInput | string | null
    individualSetting?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    explanations?: ExplanationUpdateManyWithoutEmployeeNestedInput
    workRecords?: WorkRecordUpdateManyWithoutUserNestedInput
    adminLogs?: AdminLogUpdateManyWithoutAdminNestedInput
    passwordStore?: PasswordStoreUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOtRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    employeeType?: NullableStringFieldUpdateOperationsInput | string | null
    employeeGroup?: NullableStringFieldUpdateOperationsInput | string | null
    effectiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    beginDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sso?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tax?: NullableBoolFieldUpdateOperationsInput | boolean | null
    payrollRound?: NullableStringFieldUpdateOperationsInput | string | null
    salaryRound?: NullableStringFieldUpdateOperationsInput | string | null
    individualSetting?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    explanations?: ExplanationUncheckedUpdateManyWithoutEmployeeNestedInput
    workRecords?: WorkRecordUncheckedUpdateManyWithoutUserNestedInput
    adminLogs?: AdminLogUncheckedUpdateManyWithoutAdminNestedInput
    passwordStore?: PasswordStoreUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutPasswordStoreInput = {
    username: string
    password: string
    role?: string
    fullName: string
    email: string
    position?: string | null
    department?: string | null
    company?: string | null
    branch?: string | null
    phone?: string | null
    salary?: number | null
    employeeCode?: string | null
    employeeType?: string | null
    employeeGroup?: string | null
    effectiveDate?: Date | string | null
    beginDate?: Date | string | null
    sso?: boolean | null
    tax?: boolean | null
    payrollRound?: string | null
    salaryRound?: string | null
    individualSetting?: string | null
    createdAt?: Date | string | null
    explanations?: ExplanationCreateNestedManyWithoutEmployeeInput
    workRecords?: WorkRecordCreateNestedManyWithoutUserInput
    otRequests?: OTRequestCreateNestedManyWithoutUserInput
    adminLogs?: AdminLogCreateNestedManyWithoutAdminInput
  }

  export type UserUncheckedCreateWithoutPasswordStoreInput = {
    id?: number
    username: string
    password: string
    role?: string
    fullName: string
    email: string
    position?: string | null
    department?: string | null
    company?: string | null
    branch?: string | null
    phone?: string | null
    salary?: number | null
    employeeCode?: string | null
    employeeType?: string | null
    employeeGroup?: string | null
    effectiveDate?: Date | string | null
    beginDate?: Date | string | null
    sso?: boolean | null
    tax?: boolean | null
    payrollRound?: string | null
    salaryRound?: string | null
    individualSetting?: string | null
    createdAt?: Date | string | null
    explanations?: ExplanationUncheckedCreateNestedManyWithoutEmployeeInput
    workRecords?: WorkRecordUncheckedCreateNestedManyWithoutUserInput
    otRequests?: OTRequestUncheckedCreateNestedManyWithoutUserInput
    adminLogs?: AdminLogUncheckedCreateNestedManyWithoutAdminInput
  }

  export type UserCreateOrConnectWithoutPasswordStoreInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPasswordStoreInput, UserUncheckedCreateWithoutPasswordStoreInput>
  }

  export type UserUpsertWithoutPasswordStoreInput = {
    update: XOR<UserUpdateWithoutPasswordStoreInput, UserUncheckedUpdateWithoutPasswordStoreInput>
    create: XOR<UserCreateWithoutPasswordStoreInput, UserUncheckedCreateWithoutPasswordStoreInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPasswordStoreInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPasswordStoreInput, UserUncheckedUpdateWithoutPasswordStoreInput>
  }

  export type UserUpdateWithoutPasswordStoreInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    employeeType?: NullableStringFieldUpdateOperationsInput | string | null
    employeeGroup?: NullableStringFieldUpdateOperationsInput | string | null
    effectiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    beginDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sso?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tax?: NullableBoolFieldUpdateOperationsInput | boolean | null
    payrollRound?: NullableStringFieldUpdateOperationsInput | string | null
    salaryRound?: NullableStringFieldUpdateOperationsInput | string | null
    individualSetting?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    explanations?: ExplanationUpdateManyWithoutEmployeeNestedInput
    workRecords?: WorkRecordUpdateManyWithoutUserNestedInput
    otRequests?: OTRequestUpdateManyWithoutUserNestedInput
    adminLogs?: AdminLogUpdateManyWithoutAdminNestedInput
  }

  export type UserUncheckedUpdateWithoutPasswordStoreInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    employeeType?: NullableStringFieldUpdateOperationsInput | string | null
    employeeGroup?: NullableStringFieldUpdateOperationsInput | string | null
    effectiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    beginDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sso?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tax?: NullableBoolFieldUpdateOperationsInput | boolean | null
    payrollRound?: NullableStringFieldUpdateOperationsInput | string | null
    salaryRound?: NullableStringFieldUpdateOperationsInput | string | null
    individualSetting?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    explanations?: ExplanationUncheckedUpdateManyWithoutEmployeeNestedInput
    workRecords?: WorkRecordUncheckedUpdateManyWithoutUserNestedInput
    otRequests?: OTRequestUncheckedUpdateManyWithoutUserNestedInput
    adminLogs?: AdminLogUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type UserCreateWithoutAdminLogsInput = {
    username: string
    password: string
    role?: string
    fullName: string
    email: string
    position?: string | null
    department?: string | null
    company?: string | null
    branch?: string | null
    phone?: string | null
    salary?: number | null
    employeeCode?: string | null
    employeeType?: string | null
    employeeGroup?: string | null
    effectiveDate?: Date | string | null
    beginDate?: Date | string | null
    sso?: boolean | null
    tax?: boolean | null
    payrollRound?: string | null
    salaryRound?: string | null
    individualSetting?: string | null
    createdAt?: Date | string | null
    explanations?: ExplanationCreateNestedManyWithoutEmployeeInput
    workRecords?: WorkRecordCreateNestedManyWithoutUserInput
    otRequests?: OTRequestCreateNestedManyWithoutUserInput
    passwordStore?: PasswordStoreCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAdminLogsInput = {
    id?: number
    username: string
    password: string
    role?: string
    fullName: string
    email: string
    position?: string | null
    department?: string | null
    company?: string | null
    branch?: string | null
    phone?: string | null
    salary?: number | null
    employeeCode?: string | null
    employeeType?: string | null
    employeeGroup?: string | null
    effectiveDate?: Date | string | null
    beginDate?: Date | string | null
    sso?: boolean | null
    tax?: boolean | null
    payrollRound?: string | null
    salaryRound?: string | null
    individualSetting?: string | null
    createdAt?: Date | string | null
    explanations?: ExplanationUncheckedCreateNestedManyWithoutEmployeeInput
    workRecords?: WorkRecordUncheckedCreateNestedManyWithoutUserInput
    otRequests?: OTRequestUncheckedCreateNestedManyWithoutUserInput
    passwordStore?: PasswordStoreUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAdminLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAdminLogsInput, UserUncheckedCreateWithoutAdminLogsInput>
  }

  export type UserUpsertWithoutAdminLogsInput = {
    update: XOR<UserUpdateWithoutAdminLogsInput, UserUncheckedUpdateWithoutAdminLogsInput>
    create: XOR<UserCreateWithoutAdminLogsInput, UserUncheckedCreateWithoutAdminLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAdminLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAdminLogsInput, UserUncheckedUpdateWithoutAdminLogsInput>
  }

  export type UserUpdateWithoutAdminLogsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    employeeType?: NullableStringFieldUpdateOperationsInput | string | null
    employeeGroup?: NullableStringFieldUpdateOperationsInput | string | null
    effectiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    beginDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sso?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tax?: NullableBoolFieldUpdateOperationsInput | boolean | null
    payrollRound?: NullableStringFieldUpdateOperationsInput | string | null
    salaryRound?: NullableStringFieldUpdateOperationsInput | string | null
    individualSetting?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    explanations?: ExplanationUpdateManyWithoutEmployeeNestedInput
    workRecords?: WorkRecordUpdateManyWithoutUserNestedInput
    otRequests?: OTRequestUpdateManyWithoutUserNestedInput
    passwordStore?: PasswordStoreUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAdminLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    employeeType?: NullableStringFieldUpdateOperationsInput | string | null
    employeeGroup?: NullableStringFieldUpdateOperationsInput | string | null
    effectiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    beginDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sso?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tax?: NullableBoolFieldUpdateOperationsInput | boolean | null
    payrollRound?: NullableStringFieldUpdateOperationsInput | string | null
    salaryRound?: NullableStringFieldUpdateOperationsInput | string | null
    individualSetting?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    explanations?: ExplanationUncheckedUpdateManyWithoutEmployeeNestedInput
    workRecords?: WorkRecordUncheckedUpdateManyWithoutUserNestedInput
    otRequests?: OTRequestUncheckedUpdateManyWithoutUserNestedInput
    passwordStore?: PasswordStoreUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutExplanationsInput = {
    username: string
    password: string
    role?: string
    fullName: string
    email: string
    position?: string | null
    department?: string | null
    company?: string | null
    branch?: string | null
    phone?: string | null
    salary?: number | null
    employeeCode?: string | null
    employeeType?: string | null
    employeeGroup?: string | null
    effectiveDate?: Date | string | null
    beginDate?: Date | string | null
    sso?: boolean | null
    tax?: boolean | null
    payrollRound?: string | null
    salaryRound?: string | null
    individualSetting?: string | null
    createdAt?: Date | string | null
    workRecords?: WorkRecordCreateNestedManyWithoutUserInput
    otRequests?: OTRequestCreateNestedManyWithoutUserInput
    adminLogs?: AdminLogCreateNestedManyWithoutAdminInput
    passwordStore?: PasswordStoreCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutExplanationsInput = {
    id?: number
    username: string
    password: string
    role?: string
    fullName: string
    email: string
    position?: string | null
    department?: string | null
    company?: string | null
    branch?: string | null
    phone?: string | null
    salary?: number | null
    employeeCode?: string | null
    employeeType?: string | null
    employeeGroup?: string | null
    effectiveDate?: Date | string | null
    beginDate?: Date | string | null
    sso?: boolean | null
    tax?: boolean | null
    payrollRound?: string | null
    salaryRound?: string | null
    individualSetting?: string | null
    createdAt?: Date | string | null
    workRecords?: WorkRecordUncheckedCreateNestedManyWithoutUserInput
    otRequests?: OTRequestUncheckedCreateNestedManyWithoutUserInput
    adminLogs?: AdminLogUncheckedCreateNestedManyWithoutAdminInput
    passwordStore?: PasswordStoreUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutExplanationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutExplanationsInput, UserUncheckedCreateWithoutExplanationsInput>
  }

  export type UserUpsertWithoutExplanationsInput = {
    update: XOR<UserUpdateWithoutExplanationsInput, UserUncheckedUpdateWithoutExplanationsInput>
    create: XOR<UserCreateWithoutExplanationsInput, UserUncheckedCreateWithoutExplanationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutExplanationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutExplanationsInput, UserUncheckedUpdateWithoutExplanationsInput>
  }

  export type UserUpdateWithoutExplanationsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    employeeType?: NullableStringFieldUpdateOperationsInput | string | null
    employeeGroup?: NullableStringFieldUpdateOperationsInput | string | null
    effectiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    beginDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sso?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tax?: NullableBoolFieldUpdateOperationsInput | boolean | null
    payrollRound?: NullableStringFieldUpdateOperationsInput | string | null
    salaryRound?: NullableStringFieldUpdateOperationsInput | string | null
    individualSetting?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workRecords?: WorkRecordUpdateManyWithoutUserNestedInput
    otRequests?: OTRequestUpdateManyWithoutUserNestedInput
    adminLogs?: AdminLogUpdateManyWithoutAdminNestedInput
    passwordStore?: PasswordStoreUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutExplanationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    company?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    employeeCode?: NullableStringFieldUpdateOperationsInput | string | null
    employeeType?: NullableStringFieldUpdateOperationsInput | string | null
    employeeGroup?: NullableStringFieldUpdateOperationsInput | string | null
    effectiveDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    beginDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sso?: NullableBoolFieldUpdateOperationsInput | boolean | null
    tax?: NullableBoolFieldUpdateOperationsInput | boolean | null
    payrollRound?: NullableStringFieldUpdateOperationsInput | string | null
    salaryRound?: NullableStringFieldUpdateOperationsInput | string | null
    individualSetting?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workRecords?: WorkRecordUncheckedUpdateManyWithoutUserNestedInput
    otRequests?: OTRequestUncheckedUpdateManyWithoutUserNestedInput
    adminLogs?: AdminLogUncheckedUpdateManyWithoutAdminNestedInput
    passwordStore?: PasswordStoreUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ExplanationCreateManyEmployeeInput = {
    date: Date | string
    explanation: string
    status?: string
    createdAt?: Date | string
  }

  export type WorkRecordCreateManyUserInput = {
    date: Date | string
    workHours?: number | null
    overtime?: number | null
    shiftStart?: string | null
    shiftEnd?: string | null
    status?: string | null
    note?: string | null
    clockIn?: Date | string | null
    clockOut?: Date | string | null
  }

  export type OTRequestCreateManyUserInput = {
    date: Date | string
    reason: string
    hours: number
    approved?: boolean | null
    approverId?: number | null
    createdAt?: Date | string | null
  }

  export type AdminLogCreateManyAdminInput = {
    action: string
    timestamp?: Date | string | null
    details?: string | null
  }

  export type PasswordStoreCreateManyUserInput = {
    label: string
    username: string
    password: string
    notes?: string | null
    createdAt?: Date | string | null
  }

  export type ExplanationUpdateWithoutEmployeeInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    explanation?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExplanationUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    explanation?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExplanationUncheckedUpdateManyWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    explanation?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkRecordUpdateWithoutUserInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    workHours?: NullableFloatFieldUpdateOperationsInput | number | null
    overtime?: NullableFloatFieldUpdateOperationsInput | number | null
    shiftStart?: NullableStringFieldUpdateOperationsInput | string | null
    shiftEnd?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    clockIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clockOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WorkRecordUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    workHours?: NullableFloatFieldUpdateOperationsInput | number | null
    overtime?: NullableFloatFieldUpdateOperationsInput | number | null
    shiftStart?: NullableStringFieldUpdateOperationsInput | string | null
    shiftEnd?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    clockIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clockOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WorkRecordUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    workHours?: NullableFloatFieldUpdateOperationsInput | number | null
    overtime?: NullableFloatFieldUpdateOperationsInput | number | null
    shiftStart?: NullableStringFieldUpdateOperationsInput | string | null
    shiftEnd?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    clockIn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clockOut?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OTRequestUpdateWithoutUserInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    hours?: FloatFieldUpdateOperationsInput | number
    approved?: NullableBoolFieldUpdateOperationsInput | boolean | null
    approverId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OTRequestUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    hours?: FloatFieldUpdateOperationsInput | number
    approved?: NullableBoolFieldUpdateOperationsInput | boolean | null
    approverId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OTRequestUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    hours?: FloatFieldUpdateOperationsInput | number
    approved?: NullableBoolFieldUpdateOperationsInput | boolean | null
    approverId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AdminLogUpdateWithoutAdminInput = {
    action?: StringFieldUpdateOperationsInput | string
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdminLogUncheckedUpdateWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdminLogUncheckedUpdateManyWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    details?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PasswordStoreUpdateWithoutUserInput = {
    label?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PasswordStoreUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PasswordStoreUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}