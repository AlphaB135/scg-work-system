generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id                Int             @id @default(autoincrement())
  username          String          @unique @db.NVarChar(255)
  password          String          @db.NVarChar(255)
  role              String          @default("EMPLOYEE") @db.NVarChar(20)
  fullName          String          @db.NVarChar(255)
  email             String          @unique @db.NVarChar(255)
  position          String?         @db.NVarChar(255)
  department        String?         @db.NVarChar(255)
  company           String?         @db.NVarChar(255)
  branch            String?         @db.NVarChar(255)
  phone             String?         @db.NVarChar(255)
  salary            Float?
  employeeCode      String?         @unique @db.NVarChar(255)
  employeeType      String?         @db.NVarChar(255)
  employeeGroup     String?         @db.NVarChar(255)
  effectiveDate     DateTime?       @db.DateTime
  beginDate         DateTime?       @db.DateTime
  sso               Boolean?
  tax               Boolean?
  payrollRound      String?         @db.NVarChar(255)
  salaryRound       String?         @db.NVarChar(255)
  individualSetting String?         @db.NVarChar(Max)
  createdAt         DateTime?       @default(now()) @db.DateTime

  // Relations
  workRecords       WorkRecord[]
  otRequests        OTRequest[]
  adminLogs         AdminLog[]      @relation("UserAdminLogs")
  passwordStore     PasswordStore[]
}

model WorkRecord {
  id         Int       @id @default(autoincrement())
  userId     Int
  date       DateTime  @db.DateTime
  workHours  Float?
  overtime   Float?    // ชั่วโมง OT ที่คำนวณได้
  shiftStart String?   @db.NVarChar(255)
  shiftEnd   String?   @db.NVarChar(255)

  // ❗ใช้เป็น String ปกติ + ตรวจสอบค่าภายนอก เช่น 'PRESENT', 'ABSENT'
  status     String?   @default("NORMAL") @db.NVarChar(20)
  note       String?   @db.NVarChar(255)
  clockIn    DateTime? @db.DateTime
  clockOut   DateTime? @db.DateTime

  user       User      @relation(fields: [userId], references: [id])
}

model OTRequest {
  id         Int       @id @default(autoincrement())
  userId     Int
  date       DateTime  @db.DateTime
  reason     String    @db.NVarChar(255)
  hours      Float
  approved   Boolean?
  approverId Int?
  createdAt  DateTime? @default(now()) @db.DateTime

  user       User      @relation(fields: [userId], references: [id])
}

model Reminder {
  id                Int       @id @default(autoincrement())
  title             String    @db.NVarChar(255)
  details           String?   @db.NVarChar(255)
  dueDate           DateTime  @db.DateTime
  repeat            String?   @db.NVarChar(255)
  isDone            Boolean?  @default(false)
  target            String?   @db.NVarChar(255)
  type              String?   @default("CUSTOM") @db.NVarChar(20)
  notifyBeforeDays  Int?      @default(0)
  notifiedMorning   Boolean?  @default(false)
  notifiedAfternoon Boolean?  @default(false)
  notifiedEvening   Boolean?  @default(false)
  createdAt         DateTime? @default(now()) @db.DateTime
}

model PasswordStore {
  id        Int       @id @default(autoincrement())
  userId    Int
  label     String    @db.NVarChar(255)
  username  String    @db.NVarChar(255)
  password  String    @db.NVarChar(255)
  notes     String?   @db.NVarChar(255)
  createdAt DateTime? @default(now()) @db.DateTime

  user      User      @relation(fields: [userId], references: [id])
}

model AdminLog {
  id        Int       @id @default(autoincrement())
  adminId   Int
  action    String    @db.NVarChar(255)
  timestamp DateTime? @default(now()) @db.DateTime
  details   String?   @db.NVarChar(255)

  admin     User      @relation("UserAdminLogs", fields: [adminId], references: [id])
}
