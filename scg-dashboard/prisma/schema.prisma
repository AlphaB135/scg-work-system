// ✅ schema.prisma (อัปเดตให้รองรับ mock_employees_1000.json)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int              @id @default(autoincrement())
  username         String           @unique
  password         String
  role             Role             @default(EMPLOYEE)
  fullName         String
  email            String           @unique
  position         String?
  department       String?
  company          String?
  branch           String?
  phone            String?
  salary           Float?
  employeeCode     String?          @unique // เช่น "0001-000001"
  employeeType     String?
  employeeGroup    String?
  effectiveDate    DateTime?
  beginDate        DateTime?
  sso              Boolean?
  tax              Boolean?
  payrollRound     String?
  salaryRound      String?
  individualSetting Json?

  createdAt        DateTime         @default(now())

  workRecords      WorkRecord[]
  otRequests       OTRequest[]
  passwordStore    PasswordStore[]
  adminLogs        AdminLog[]       @relation("UserAdminLogs")
}


enum Role {
  ADMIN
  EMPLOYEE
  SUPERVISOR
}

model WorkRecord {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  date       DateTime
  workHours  Float?
  overtime   Float?
  status     Status   @default(NORMAL)
  note       String?
  clockIn    DateTime?
  clockOut   DateTime?
}

enum Status {
  NORMAL
  LATE
  PRESENT
  OT_PENDING
  OT_APPROVED
  ABSENT
  LEAVE
  HOLIDAY
}

model OTRequest {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  date        DateTime
  reason      String
  hours       Float
  approved    Boolean?
  approverId  Int?
  createdAt   DateTime @default(now())
}

model Reminder {
  id        Int            @id @default(autoincrement())
  title     String
  details   String?
  dueDate   DateTime
  repeat    String?
  isDone    Boolean        @default(false)
  target    String?
  type      ReminderType   @default(CUSTOM)
  notifyBeforeDays Int?     @default(0)
  notifiedMorning  Boolean @default(false)
  notifiedAfternoon Boolean @default(false)
  notifiedEvening  Boolean @default(false)
  createdAt DateTime       @default(now())
}

enum ReminderType {
  FIXED
  CUSTOM
}

model PasswordStore {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  label      String
  username   String
  password   String // Encrypted
  notes      String?
  createdAt  DateTime @default(now())
}

model AdminLog {
  id        Int      @id @default(autoincrement())
  admin     User     @relation("UserAdminLogs", fields: [adminId], references: [id])
  adminId   Int
  action    String
  timestamp DateTime @default(now())
  details   String?
}